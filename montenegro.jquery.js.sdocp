sdocp('montenegro.jquery.js.sdoc', 'Client-side Montenegro/jQuery bindings | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nMontenegro works with jQuery to add structure to user interfaces and define useful shorthands for common cases.\n\n  montenegro =\n\nEvent bindings.\nMontenegro specifies syntax for binding events through jQuery. For example, instead of writing this:\n\n| $(\'selector\').live(\'click\', fn_[...]);\n\nYou can write this instead:\n\n| \'selector\' >jqc> ...;\n\n  caterwaul.tconfiguration(\'std\', \'montenegro.jquery.event\', function () {\n    this.rmacro(qs[_ >jqc> _][fn[selector, handler][qs[$(_selector).live(\'click\', fn_[_handler, where[t = $(this)]])].replace({_selector: selector, _handler: handler}),\n                                                    when[selector.is_string()]]])}).\n\nCloning.\nA common pattern is to create a \'templates\' container to contain structural templates for things, then define invertible functions to (1) render those templates from server-side data, and then\n(2) serialize their state back into logical data objects. The replicate() function is the beginning of that process.\n\n\n\nFinal configuration.\n\n  configuration(\'montenegro.jquery\', function () {this.configure(\'montenegro.jquery.event\')}).clone(\'montenegro.jquery\');\n');