sdocp('montenegro.jquery.js.sdoc', 'Client-side Montenegro/jQuery bindings | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nMontenegro works with jQuery to add structure to user interfaces and define useful shorthands for common cases.\n\n  montenegro =\n\nEvent bindings.\nMontenegro specifies syntax for binding events through jQuery. For example, instead of writing this:\n\n| $(\'selector\').live(\'click\', fn_[...]);\n\nYou can write this instead:\n\n| \'selector\' >jqc> ...;\n\n  caterwaul.tconfiguration(\'std\', \'montenegro.jquery.event\', function () {\n    this.rmacro(qs[_ >jqc> _], fn[selector, handler][qs[$(_selector).live(\'click\', fn_[_handler, where[t = $(this)]])].replace({_selector: selector, _handler: handler}),\n                                                     when[selector.is_string()]])}).\n\nCloning.\nA common pattern is to create a \'templates\' container to contain structural templates for things, then define invertible functions to (1) render those templates from server-side data, and then\n(2) serialize their state back into logical data objects. The replicate() function is the beginning of that process.\n\n  Element types.\n  Each template is assumed to be of a different type; that is, it has its own logical-data conversion rules. Template names and type names are linked; $(\'#foo\') will select the template for\n  the \'foo\' type, for example. When you create a new \'foo\', you get an element with the class \'foo\' and the \'foo\' initializers will be run on it.\n\n  You\'re expected to know what type an object is before you create an element from it. (So the type detection goes only one way -- given an element you can find its type, but there isn\'t\n  necessarily a way to find an object\'s type based on its data.) Here\'s how to define a simple first-name/last-name component, for instance:\n\n  | find(\'.first-name\').val(it.first).end().find(\'.last-name\').val(it.last).end() <miso(person)> {first: it.find(\'.first-name\').val(), last: it.find(\'.last-name\').val()};\n\n  It\'s expected that you\'ll have this markup (possibly with more stuff):\n\n  | <div id=\'person\'>\n      <input class=\'first-name\' />\n      <input class=\'last-name\' />\n    </div>\n\n  You can also define initializers:\n\n  | minit(person) << find(\'.first-name, .last-name\').instavalidate(/^\\w+$/).end();\n\nFinal configuration.\n\n  configuration(\'montenegro.jquery\', function () {this.configure(\'montenegro.jquery.event\')}).clone(\'montenegro.jquery\');\n');