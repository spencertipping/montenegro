// Montenegro server library | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// Montenegro extends Caterwaul (http://spencertipping.com/caterwaul) to operate in a node.js environment and provide an RPC endpoint.

  caterwaul.

// Node.js variables and Montenegro reference.
// Caterwaul has a problem with node.js variables. Specifically, code that it compiles can't reach the 'require' variable, which ends up being really important. To fix this, Montenegro binds that
// variable within any compiled function by using a macro.

   configuration('montenegro.core',           function () {this.field('montenegro', {require: require})}).
  tconfiguration('std', 'montenegro.require', function () {this.configure('montenegro.core').macro(qs[require],    new this.ref(this.montenegro.require) /re[fn_[_]])}).
  tconfiguration('std', 'montenegro.ref',     function () {this.configure('montenegro.core').macro(qs[montenegro], new this.ref(this.montenegro)         /re[fn_[_]])}).

// RPC endpoints.
// You can create an RPC service on a URL. The RPC endpoint wraps the function in a CPS-converted HTTP request/response proxy that listens for POST requests on a given URL, expects a JSON array
// in the body, and converts the body into a list of parameters for the function you specify. Your function can access the reply continuation by either returning normally or invoking 'this' on
// the reply object.

// All listeners are CPS-converted, so you can have coroutine-based communication between the client and server. For example, this is a broadcast chat server (which relies on singly re-entrant
// continuations for replies):

// | var clients = seq[~[]];
//   montenegro.rpc('/chat', fn_[clients.push(this)]);
//   montenegro.rpc('/chat/send', fn[message][seq[clients *![_(message)], clients = ~[]], this('OK')]);

// The client code would look like this:

// | var send = montenegro.rpc('/chat/send');
//   var chat = montenegro.rpc('/chat');
//   let*[listen() = let/cps[message <- chat(_)][console.log(message), listen()]] in listen();
//   let/cps[_ <- $('#send').click(_)][send($('#textbox').val())];

// Final configuration.
// This configuration bundles all of the configurations together.

  configuration('montenegro', function () {this.configure('montenegro.require montenegro.ref montenegro.http')});

// Generated by SDoc 
