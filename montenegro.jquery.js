// Client-side Montenegro/jQuery bindings | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// Montenegro works with jQuery to add structure to user interfaces and define useful shorthands for common cases.

  montenegro =

// Event bindings.
// Montenegro specifies syntax for binding events through jQuery. For example, instead of writing this:

// | $('selector').live('click', fn_[...]);

// You can write this instead:

// | 'selector' >jqc> ...;

  caterwaul.tconfiguration('std', 'montenegro.jquery.event', function () {
    this.rmacro(qs[_ >jqc> _], fn[selector, handler][qs[$(_selector).live('click', fn_[_handler, where[t = $(this)]])].replace({_selector: selector, _handler: handler}),
                                                     when[selector.is_string()]])}).

// Cloning.
// A common pattern is to create a 'templates' container to contain structural templates for things, then define invertible functions to (1) render those templates from server-side data, and then
// (2) serialize their state back into logical data objects. The replicate() function is the beginning of that process.

//   Element types.
//   Each template is assumed to be of a different type; that is, it has its own logical-data conversion rules. Template names and type names are linked; $('#foo') will select the template for
//   the 'foo' type, for example. When you create a new 'foo', you get an element with the class 'foo' and the 'foo' initializers will be run on it.

//   You're expected to know what type an object is before you create an element from it. (So the type detection goes only one way -- given an element you can find its type, but there isn't
//   necessarily a way to find an object's type based on its data.) Here's how to define a simple first-name/last-name component, for instance:

//   | find('.first-name').val(it.first).end().find('.last-name').val(it.last).end() <miso(person)> {first: it.find('.first-name').val(), last: it.find('.last-name').val()};

//   It's expected that you'll have this markup (possibly with more stuff):

//   | <div id='person'>
//       <input class='first-name' />
//       <input class='last-name' />
//     </div>

//   You can also define initializers:

//   | minit(person) << find('.first-name, .last-name').instavalidate(/^\w+$/).end();

// Final configuration.

  configuration('montenegro.jquery', function () {this.configure('montenegro.jquery.event')}).clone('montenegro.jquery');

// Generated by SDoc 
