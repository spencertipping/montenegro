#!/usr/bin/perl
# SDoc source unpacker | Spencer Tipping
# Licensed under the terms of the MIT source code license

my @args = ();
push @args, shift @ARGV until $ARGV[0] !~ /^-/ or $ARGV[0] eq '--' or not @ARGV;

my ($comment) = grep s/^--comment=//, @args;
my  $sdocp    = grep /^--sdocp$/ || /^-p$/, @args;

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    ;   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_$e", split /\n/, $text)}

sub paragraphs {map split(/(\n{2,})/, $_), @_}
sub read_file  {open my $fh, '<', $_[0]; my $result = join '', <$fh>; close $fh; $result}
sub write_file {chmod 0644, $_[0]; open my $fh, '>', $_[0]; print $fh $_[1]; close $fh; chmod 0444, $_[0]}

sub escape     {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}

sub generate_source {
  my ($filename)    = @_;
  my ($extension)   = $filename =~ /\.(\w+)\.sdoc$/igo;
  my ($new_file)    = $filename =~ /^(.*)\.sdoc$/igo;
  my ($start, $end) = split /,/o, $comment || $comments_for_extension{lc $extension};

  warn "Not clobbering $new_file" and return if -f $new_file && (! read_file($new_file) =~ /\s$generated_string\s/ || -w $new_file);
  write_file $new_file, join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs read_file $filename),
                                 "\n$start $generated_string $end\n";
  chmod 0555, $new_file if read_file($filename) =~ /^#!/mo;

  if ($sdocp) {
    # Generate an SDocP file, which is similar to JSONP but the callback takes a string of SDoc.
    # SDocP always uses the 'sdocp()' callback.
    $filename =~ s/^\.\///;     # Remove ./ on the beginning, if it's there
    my $contents         = escape read_file $filename;
    my $escaped_filename = escape $filename;
    write_file "${filename}p", "sdocp('$escaped_filename', '$contents');" if -f $filename;
  }
}

map generate_source($_), @ARGV ? map(-d($_) ? <$_/*.sdoc> : $_, @ARGV) : <*.sdoc>;

__END__

=head1 NAME

sdoc - Simple documentation - source unpacker

=head1 SYNOPSYS

sdoc [--comments=x,y] [-p|--sdocp] [file1 [file2 [... fileN]]]

=head1 DESCRIPTION

SDoc is a file format that lets you use comments more transparently than you normally would. sdoc converts SDoc-format source code into usable source (i.e. it comments out documentation). The
file produced by sdoc is write-protected as a reminder that edits should go in the C<.sdoc> file instead.

sdoc is designed to be used with no options most of the time. Without options or arguments, it will process all C<.sdoc> files in the current directory.

=head1 OPTIONS

=over 2

=item B<--comment=/*,*/>

Sets the comment delimiters. Normally these are detected from the file's extension, but they can be set explicitly. All generated comments are line comments; that is, multiline block
comments are never used. To define line comments, leave the second field blank (the comma can also be omitted); for example, C<--comment=//> will define C++-style comments, and C<--comment=#>
defines Perl-style comments. If specified, this style of commenting is used for all files regardless of their extensions.

=back

=over 2

=item B<-p, --sdocp>

Generates C<.sdocp> files. These are used for HTML documentation (see C<sdoc.html> for more information).

=back

=head1 FILE FORMAT

The SDoc file format is, well, very simple. sdoc first splits the file into paragraphs, where paragraphs are separated by one or more blank lines. A simple heuristic is then used to
categorize them: documentation paragraphs begin with a capital letter or pipe symbol (|), and code paragraphs begin with anything else. Documentation paragraphs are commented out, and source
paragraphs are left alone.

You can override paragraphs' categorizations. For example, sdoc will infer this paragraph as documentation, since it starts with a capital letter:

    String.prototype.trim = function () {
      return this.replace (/^\s*/, '').replace (/\s*$/, '');
    };

To force it to be interpreted as code, you can mark it like this:

    c
    String.prototype.trim = function () {
      return this.replace (/^\s*/, '').replace (/\s*$/, '');
    };

Similarly, when you are including code samples in your documentation, such as:

    This code snippet does something interesting:

      let foo x = foo x + 1

you can force documentation by using this notation:

    This code snippet does something interesting:

    | let foo x = foo x + 1

Here is what a valid SDoc file looks like:

    Header material -- this is all comments.
    This program does something really spiffy. Check out the /main/ method:

    int main () {
      // This paragraph starts with a lowercase letter, so it is code.
      return 0;
    }

If this program is in a file called C<main.c.sdoc>, then sdoc will generate the following in a file called C<main.c>:

    /* Header material -- this is all comments. */
    /* This program does something really spiffy. Check out the main() method: */

    int main () {
      // This paragraph starts with a lowercase letter, so it is code.
      return 0;
    }
    /* Generated by SDoc */

The C<Generated by SDoc> line tells sdoc that it's OK to clobber the file's contents. sdoc will refuse to clobber a file without this notice at the end.

=head1 AUTHOR

Spencer Tipping <spencer@spencertipping.com>

=head1 OBTAINING

The latest version of SDoc is freely available from L<http://github.com/spencertipping/sdoc> or L<http://spencertipping.com/sdoc>.

=cut
