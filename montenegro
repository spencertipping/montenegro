#!/usr/bin/perl
# Run perldoc on this file for documentation.

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    $delegate->($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__25976e07665878d3fae18f050160343f');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__25976e07665878d3fae18f050160343f
meta::meta('externalize', <<'__9141b4e8752515391385516ae94b23b5');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  $externalized_functions{$name} = $attribute;
  *{"::$name"} = $implementation || $attribute;
}
__9141b4e8752515391385516ae94b23b5
meta::meta('functor::editable', <<'__e3d2ede6edf65ffe2123584b2bd5dab7');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__e3d2ede6edf65ffe2123584b2bd5dab7
meta::meta('type::alias', <<'__28fe15dd61f4902ed5180d8604d15d97');
meta::configure 'alias', inherit => 0;
meta::define_form 'alias', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "alias::$name", sub {
    # Can't pre-tokenize because shell::tokenize doesn't exist until the library::
    # namespace has been evaluated (which will be after alias::).
    shell::run(shell::tokenize($value), shell::tokenize(@_));
  };
};
__28fe15dd61f4902ed5180d8604d15d97
meta::meta('type::bootstrap', <<'__297d03fb32df03b46ea418469fc4e49e');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__297d03fb32df03b46ea418469fc4e49e
meta::meta('type::cached_dependency', <<'__e9455b403cbff27bbcc41d917fef482f');
meta::configure 'cached_dependency', inherit => 0, extension => '';
meta::define_form 'cached_dependency', \&meta::bootstrap::implementation;
__e9455b403cbff27bbcc41d917fef482f
meta::meta('type::configuration', <<'__d67e10a128e6b1d958c5b9d3bbe25aa4');
meta::functor::editable 'configuration', inherit => 0, extension => '.conf', default => sub {
  # Any lines starting with #, with or without leading whitespace, are treated as comments.
  # Comments are not parsed in option text; that is, you could specify an option that contained
  # a # and the # and following text would be considered part of that option.
  my ($data) = @_;
  my @options = grep /:/o && ! /^\h*#/o && ! /^\h*$/o, split(/\v+/o, $data);
  s/^\h+//o for @options;
  my @key_values = map split(/\s*:\s*/o, $_, 2), @options;
  $key_values[$_ << 1] and $key_values[$_ << 1] =~ s/\s/_/go for 0 .. @key_values >> 1;
  $key_values[$_ << 1] and $key_values[$_ << 1] = lc $key_values[$_ << 1] for 0 .. @key_values >> 1;
  @key_values;
};
__d67e10a128e6b1d958c5b9d3bbe25aa4
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::function', <<'__d93b3cc15693707dac518e3d6b1f5648');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__d93b3cc15693707dac518e3d6b1f5648
meta::meta('type::hook', <<'__f55a3f728ddfb90204dff3fe5d86845c');
meta::configure 'hook', extension => '.pl', inherit => 0;
meta::define_form 'hook', sub {
  my ($name, $value) = @_;
  *{"hook::$name"} = meta::eval_in("sub {\n$value\n}", "hook::$name");
};
__f55a3f728ddfb90204dff3fe5d86845c
meta::meta('type::inc', <<'__c95915391b969734305f2f492d5ca8e3');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__c95915391b969734305f2f492d5ca8e3
meta::meta('type::internal_function', <<'__34abb44c67c7e282569e28ef6f4d62ab');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__34abb44c67c7e282569e28ef6f4d62ab
meta::meta('type::js', 'meta::functor::editable \'js\', extension => \'.js\', inherit => 1;');
meta::meta('type::library', <<'__b6dd78120e6d787acdb5c1629f7f1896');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
};
__b6dd78120e6d787acdb5c1629f7f1896
meta::meta('type::message_color', <<'__794bf137c425293738f07636bcfb5c55');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__794bf137c425293738f07636bcfb5c55
meta::meta('type::meta', <<'__640f25635ce2365b0648962918cf9932');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__640f25635ce2365b0648962918cf9932
meta::meta('type::parent', <<'__607e9931309b1b595424bedcee5dfa45');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__607e9931309b1b595424bedcee5dfa45
meta::meta('type::retriever', <<'__6e847a9d205e4a5589765a3366cdd115');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__6e847a9d205e4a5589765a3366cdd115
meta::meta('type::sdoc', <<'__392c65eddae300e2aa67014b85884979');
# A meta-type for other types. So retrieve('js::main') will work if you have
# the attribute 'sdoc::js::main'. The filename will be main.js.sdoc.

meta::functor::editable 'sdoc', inherit => 1, extension => sub {
  extension_for(attribute($_[0])) . '.sdoc';
};
__392c65eddae300e2aa67014b85884979
meta::meta('type::state', <<'__c1f29670be26f1df6100ffe4334e1202');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__c1f29670be26f1df6100ffe4334e1202
meta::alias('ec', 'edit sdoc::js::montenegro.client');
meta::alias('es', 'edit sdoc::js::montenegro.server');
meta::bootstrap('initialization', <<'__8774229a1a0ce7fd056d81ba0b077f79');
#!/usr/bin/perl
# Run perldoc on this file for documentation.

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    $delegate->($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__8774229a1a0ce7fd056d81ba0b077f79
meta::bootstrap('perldoc', <<'__c63395cbc6f7160b603befbb2d9b6700');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__c63395cbc6f7160b603befbb2d9b6700
meta::cached_dependency('caterwaul.all.js', '(function (f){return f(f)})(function (self,undefined){var qw=function (x){return x.split(/\\s+/)},id=function (x){return x},se=function (x,f){return f&&f.call(x,x)||x},gensym=(function (n,m){return function (){return \'gensym_\'+n.toString(36)+\'_\'+( ++m).toString(36)}})( +new Date(),Math.random()*(1<<30)>>>0),bind=function (f,t){return f.binding===t?f:f.original?bind(f.original,t):merge(function (){return f.apply(t,arguments)},{original:f,binding:t})},map=function (f,xs){for (var i=0,ys=[],l=xs.length;i<l; ++i)ys.push(f(xs[i],i));return ys},hash=function (s){for (var i=0,xs=qw(s),o={},l=xs.length;i<l; ++i)o[xs[i]]=true;return annotate_keys(o)},merge=function (o){for (var i=1,l=arguments.length,_=null;_=arguments[i],i<l; ++i)if (_)for (var k in _)has(_,k)&&(o[k]=_[k]);return o},extend=function (f){merge.apply(null,[f.prototype].concat(Array.prototype.slice.call(arguments,1)));return f},annotate_keys=function (o){var max=0;for (var k in o)own.call(o,k)&&(max=k.length>max?k.length:max);o._max_length=max;return o},has=function (o,p){return p&& !(p.length>o._max_length)&&p!==\'_max_length\'&&own.call(o,p)},own=Object.prototype.hasOwnProperty,_caterwaul=typeof caterwaul===\'undefined\'?undefined:caterwaul,syntax_node_inspect=function (x){return x?x.inspect():\'(<>)\'},syntax_node_tostring=function (x){return x?x.serialize?x.serialize():x.toString():\'\'},node_methods={_replace:function (n){return (n.l=this.l)&&(this.l.r=n),(n.r=this.r)&&(this.r.l=n),this},_append_to:function (n){return n&&n._append(this),this},_reparent:function (n){return this.p&&this.p[0]===this&&(this.p[0]=n),this},_fold_l:function (n){return this._append(this.l&&this.l._unlink(this))},_append:function (n){return (this[this.length++]=n)&&(n.p=this),this},_fold_r:function (n){return this._append(this.r&&this.r._unlink(this))},_sibling:function (n){return n.p=this.p,(this.r=n).l=this},_fold_lr:function (){return this._fold_l()._fold_r()},_wrap:function (n){return n.p=this._replace(n).p,this._reparent(n),delete this.l,delete this.r,this._append_to(n)},_fold_rr:function (){return this._fold_r()._fold_r()},_unlink:function (n){return this.l&&(this.l.r=this.r),this.r&&(this.r.l=this.l),delete this.l,delete this.r,this._reparent(n)},pop:function (){return  --this.length,this},push:function (x){return this[this.length++]=x,this},id:function (){return this.id||(this.id=gensym())},each:function (f){for (var i=0,l=this.length;i<l; ++i)f(this[i],i);return this},map:function (f){for (var n=new this.constructor(this),i=0,l=this.length;i<l; ++i)n.push(f(this[i],i)||this[i]);return n},nmap:function (f){for (var n=new this.constructor(this),i=0,l=this.length,r;i<l; ++i)(r=f(this[i],i))&&n.push(r);return n},reach:function (f){f(this);this.each(function (n){n&&n.reach(f)});return this},rmap:function (f){var r=f(this);return  !r||r===this?this.map(function (n){return n&&n.rmap(f)}):r.data===undefined?new this.constructor(r):r},rnmap:function (f){var r=f(this);return r===this?this.nmap(function (n){return n&&n.rnmap(f)}):r&&r.data===undefined?new this.constructor(r):r},clone:function (){return this.rmap(function (){return false})},collect:function (p){var ns=[];this.reach(function (n){p(n)&&ns.push(n)});return ns},replace:function (rs){return this.rnmap(function (n){return own.call(rs,n.data)?rs[n.data]:n})},repopulated_with:function (xs){return new this.constructor(this.data,xs)},change:function (i,x){return se(new this.constructor(this.data,Array.prototype.slice.call(this)),function (n){n[i]=x})},compose_single:function (i,f){return this.change(i,f(this[i]))},traverse:function (f){f({entering:this});f({exiting:this.each(function (n){n&&n.traverse(f)})});return this},flatten:function (d){d=d||this.data;return d!==this.data?this.as(d): !(has(parse_lr,d)&&this.length)?this:has(parse_associates_right,d)?se(new this.constructor(d),bind(function (n){for (var i=this;i&&i.data===d;i=i[1])n.push(i[0]);n.push(i)},this)):se(new this.constructor(d),bind(function (n){for (var i=this,ns=[];i.data===d;i=i[0])i[1]&&ns.push(i[1]);ns.push(i);for (i=ns.length-1;i>=0; --i)n.push(ns[i])},this))},unflatten:function (){var right=has(parse_associates_right,this.data);return this.length<=2?this:se(new this.constructor(this.data),bind(function (n){if (right)for (var i=0,l=this.length-1;i<l; ++i)n=n.push(this[i]).push(i<l-2?new this.constructor(this.data):this[i])[1];else for (var i=this.length-1;i>=1; --i)n=n.push(i>1?new this.constructor(this.data):this[0]).push(this[i])[0]},this))},as:function (d){return this.data===d?this:new this.constructor(d).push(this)},is_string:function (){return /[\'"]/.test(this.data.charAt(0))},as_escaped_string:function (){return this.data.substr(1,this.data.length-2)},is_number:function (){return /^-?(0x|\\d|\\.\\d+)/.test(this.data)},as_number:function (){return Number(this.data)},is_boolean:function (){return this.data===\'true\'||this.data===\'false\'},as_boolean:function (){return this.data===\'true\'},is_regexp:function (){return /^\\/./.test(this.data)},as_escaped_regexp:function (){return this.data.substring(1,this.data.lastIndexOf(\'/\'))},has_grouped_block:function (){return has(parse_r_until_block,this.data)},is_block:function (){return has(parse_block,this.data)},is_blockless_keyword:function (){return has(parse_r_optional,this.data)},is_null_or_undefined:function (){return this.data===\'null\'||this.data===\'undefined\'},is_constant:function (){return this.is_number()||this.is_string()||this.is_boolean()||this.is_regexp()||this.is_null_or_undefined()},left_is_lvalue:function (){return /=$/.test(this.data)||/\\+\\+$/.test(this.data)||/--$/.test(this.data)},is_empty:function (){return  !this.length},has_parameter_list:function (){return this.data===\'function\'||this.data===\'catch\'},has_lvalue_list:function (){return this.data===\'var\'||this.data===\'const\'},is_dereference:function (){return this.data===\'.\'||this.data===\'[]\'},is_invocation:function (){return this.data===\'()\'},is_contextualized_invocation:function (){return this.is_invocation()&&this[0]&&this[0].is_dereference()},is_invisible:function (){return has(parse_invisible,this.data)},is_binary_operator:function (){return has(parse_lr,this.data)},is_prefix_unary_operator:function (){return has(parse_r,this.data)},is_postfix_unary_operator:function (){return has(parse_l,this.data)},is_unary_operator:function (){return this.is_prefix_unary_operator()||this.is_postfix_unary_operator()},accepts:function (e){return parse_accepts[this.data]&&this.accepts[parse.data]===(e.data||e)},bindings:function (hash){var result=hash||{};this.reach(function (n){if (n.binds_a_value)result[n.data]=n.value});return result},match:function (pattern){return macro_try_match(pattern,this)},ends_with_block:function (){var block_index=parse_r_until_block[this.data],block=this[block_index];return this.data===\'{\'||has(parse_r_until_block,this.data)&&(this.data!==\'function\'||this.length===3)&&block&&block.ends_with_block()},toString:function (){return this.inspect()},inspect:function (){return (this.l?\'(left) <- \':\'\')+\'(\'+this.data+(this.length?\' \'+map(syntax_node_inspect,this).join(\' \'):\'\')+\')\'+(this.r?\' -> \'+this.r.inspect():\'\')},serialize:function (){var op=this.data,right=this.r?\'/* -> \'+this.r.serialize()+\' */\':\'\',space=/\\w/.test(op.charAt(op.length-1))?\' \':\'\',s=has(parse_invisible,op)?map(syntax_node_tostring,this).join(space):has(parse_invocation,op)?map(syntax_node_tostring,[this[0],op.charAt(0),this[1],op.charAt(1)]).join(space):has(parse_ternary,op)?map(syntax_node_tostring,[this[0],op,this[1],parse_group[op],this[2]]).join(space):has(parse_group,op)?op+map(syntax_node_tostring,this).join(space)+parse_group[op]:has(parse_lr,op)?this.length?map(syntax_node_tostring,this).join(space+op+space):op:has(parse_r,op)||has(parse_r_optional,op)?op.replace(/^u/,\' \')+space+(this[0]?this[0].serialize():\'\'):has(parse_r_until_block,op)?has(parse_accepts,op)&&this[1]&&this[2]&&parse_accepts[op]===this[2].data&& !this[1].ends_with_block()?op+space+map(syntax_node_tostring,[this[0],this[1],\';\',this[2]]).join(\'\'):op+space+map(syntax_node_tostring,this).join(\'\'):has(parse_l,op)?(this[0]?this[0].serialize():\'\')+space+op:op;return right?s+right:s}},ref=extend(function (value){if (value instanceof this.constructor){this.value=value.value;this.data=value.data}else {this.value=value;this.data=gensym()}},{length:0,binds_a_value:true},node_methods),syntax_node=extend(function (data){if (data instanceof this.constructor)this.data=data.data,this.length=0;else {this.data=data&&data.toString();this.length=0;for (var i=1,l=arguments.length,_;_=arguments[i],i<l; ++i)for (var j=0,lj=_.length,it,itc;_ instanceof Array?(it=_[j],j<lj):(it=_, !j); ++j)this._append((itc=it.constructor)===String||itc===Number||itc===Boolean?new this.constructor(it):it)}},node_methods),lex_op=hash(\'. new ++ -- u++ u-- u+ u- typeof u~ u! ! * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? = += -= *= /= %= &= |= ^= <<= >>= >>>= : , \'+\'return throw case var const break continue void else u; ;\'),lex_table=function (s){for (var i=0,xs=[false];i<8; ++i)xs.push.apply(xs,xs);for (var i=0,l=s.length;i<l; ++i)xs[s.charCodeAt(i)]=true;return xs},lex_float=lex_table(\'.0123456789\'),lex_decimal=lex_table(\'0123456789\'),lex_integer=lex_table(\'0123456789abcdefABCDEFx\'),lex_exp=lex_table(\'eE\'),lex_space=lex_table(\' \\n\\r\\t\'),lex_bracket=lex_table(\'()[]{}\'),lex_opener=lex_table(\'([{\'),lex_punct=lex_table(\'+-*/%&|^!~=<>?:;.,\'),lex_eol=lex_table(\'\\n\\r\'),lex_regexp_suffix=lex_table(\'gims\'),lex_quote=lex_table(\'\\\'"/\'),lex_slash=\'/\'.charCodeAt(0),lex_star=\'*\'.charCodeAt(0),lex_back=\'\\\\\'.charCodeAt(0),lex_x=\'x\'.charCodeAt(0),lex_dot=\'.\'.charCodeAt(0),lex_zero=\'0\'.charCodeAt(0),lex_postfix_unary=hash(\'++ --\'),lex_ident=lex_table(\'$_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\'),parse_reduce_order=map(hash,[\'function\',\'( [ . [] ()\',\'new delete\',\'u++ u-- ++ -- typeof u~ u! u+ u-\',\'* / %\',\'+ -\',\'<< >> >>>\',\'< > <= >= instanceof in\',\'== != === !==\',\'&\',\'^\',\'|\',\'&&\',\'||\',\'case\',\'?\',\'= += -= *= /= %= &= |= ^= <<= >>= >>>=\',\':\',\',\',\'return throw break continue void\',\'var const\',\'if else try catch finally for switch with while do\',\';\']),parse_associates_right=hash(\'= += -= *= /= %= &= ^= |= <<= >>= >>>= ~ ! new typeof u+ u- -- ++ u-- u++ ? if else function try catch finally for switch case with while do\'),parse_inverse_order=(function (xs){for (var o={},i=0,l=xs.length;i<l; ++i)for (var k in xs[i])has(xs[i],k)&&(o[k]=i);return annotate_keys(o)})(parse_reduce_order),parse_index_forward=(function (rs){for (var xs=[],i=0,l=rs.length,_=null;_=rs[i],xs[i]=true,i<l; ++i)for (var k in _)if (has(_,k)&&(xs[i]=xs[i]&& !has(parse_associates_right,k)))break ;return xs})(parse_reduce_order),parse_lr=hash(\'[] . () * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || = += -= *= /= %= &= |= ^= <<= >>= >>>= , : ;\'),parse_r_until_block=annotate_keys({\'function\':2,\'if\':1,\'do\':1,\'catch\':1,\'try\':1,\'for\':1,\'while\':1,\'with\':1}),parse_accepts=annotate_keys({\'if\':\'else\',\'do\':\'while\',\'catch\':\'finally\',\'try\':\'catch\'}),parse_invocation=hash(\'[] ()\'),parse_r_optional=hash(\'return throw break continue else\'),parse_also_expression=hash(\'function\'),parse_r=hash(\'u+ u- u! u~ u++ u-- new typeof finally var const void delete\'),parse_block=hash(\'; {\'),parse_invisible=hash(\'i;\'),parse_l=hash(\'++ --\'),parse_group=annotate_keys({\'(\':\')\',\'[\':\']\',\'{\':\'}\',\'?\':\':\'}),parse_ambiguous_group=hash(\'[ (\'),parse_ternary=hash(\'?\'),parse_not_a_value=hash(\'function if for while catch\'),parse=function (input){var s=input.toString(),mark=0,c=0,re=true,esc=false,dot=false,exp=false,close=0,t=\'\',i=0,l=s.length,cs=function (i){return s.charCodeAt(i)},grouping_stack=[],gs_top=null,head=null,parent=null,indexes=map(function (){return []},parse_reduce_order),invocation_nodes=[],all_nodes=[],new_node=function (n){return all_nodes.push(n),n},push=function (n){return head?head._sibling(head=n):(head=n._append_to(parent)),new_node(n)};while ((mark=i)<l){while (lex_space[c=cs(i)]&&i<l)mark= ++i;esc=exp=dot=t=false;if (lex_bracket[c]){t= ! ! ++i;re=lex_opener[c]}else if (c===lex_slash&&cs(i+1)===lex_star&&(i+=2)){while ( ++i<l&&cs(i)!==lex_slash||cs(i-1)!==lex_star);t= ! ++i}else if (c===lex_slash&&cs(i+1)===lex_slash){while ( ++i<l&& !lex_eol[cs(i)]);t=false}else if (lex_quote[c]&&(close=c)&&re&& !(re= !(t=s.charAt(i)))){while ( ++i<l&&(c=cs(i))!==close||esc)esc= !esc&&c===lex_back;while ( ++i<l&&lex_regexp_suffix[cs(i)]);t=true}else if (c===lex_zero&&lex_integer[cs(i+1)]){while ( ++i<l&&lex_integer[cs(i)]);re= !(t=true)}else if (lex_float[c]&&(c!==lex_dot||lex_decimal[cs(i+1)])){while ( ++i<l&&(lex_decimal[c=cs(i)]||(dot^(dot|=c===lex_dot))||(exp^(exp|=lex_exp[c]&& ++i))));while (i<l&&lex_decimal[cs(i)]) ++i;re= !(t=true)}else if (lex_punct[c]&&(t=re?\'u\':\'\',re=true)){while (i<l&&lex_punct[cs(i)]&&has(lex_op,t+s.charAt(i)))t+=s.charAt(i++);re= !has(lex_postfix_unary,t)}else {while ( ++i<l&&lex_ident[cs(i)]);re=has(lex_op,t=s.substring(mark,i))}if (i===mark)throw new Error(\'Caterwaul lex error at "\'+s.substr(mark,40)+\'" with leading context "\'+s.substr(mark-40,40)+\'" (probably a Caterwaul bug)\');if (t===false)continue ;t=t===true?s.substring(mark,i):t===\'u;\'?\';\':t;t===gs_top?(grouping_stack.pop(),gs_top=grouping_stack[grouping_stack.length-1],head=head?head.p:parent,parent=null):(has(parse_group,t)?(grouping_stack.push(gs_top=parse_group[t]),parent=push(new_node(new syntax_node(t))),head=null):push(new_node(new syntax_node(t))),has(parse_inverse_order,t)&&indexes[parse_inverse_order[t]].push(head||parent));re|=t===\')\'&&head.l&&has(parse_r_until_block,head.l.data)}for (var i=0,l=indexes.length,forward,_;_=indexes[i],forward=parse_index_forward[i],i<l; ++i)for (var j=forward?0:_.length-1,lj=_.length,inc=forward?1: -1,node,data;node=_[j],data=node&&node.data,forward?j<lj:j>=0;j+=inc)if (has(parse_lr,data))node._fold_lr();else if (has(parse_ambiguous_group,data)&&node.l&&(node.l.data===\'.\'|| !(has(lex_op,node.l.data)||has(parse_not_a_value,node.l.data))))invocation_nodes.push(node.l._wrap(new_node(new syntax_node(data+parse_group[data]))).p._fold_r());else if (has(parse_l,data))node._fold_l();else if (has(parse_r,data))node._fold_r();else if (has(parse_ternary,data)){node._fold_lr();var temp=node[1];node[1]=node[0];node[0]=temp}else if (has(parse_r_until_block,data)&&node.r&&node.r.data!==\':\'){for (var count=0,limit=parse_r_until_block[data];count<limit&&node.r&& !has(parse_block,node.r.data); ++count)node._fold_r();node.r&&node.r.data!==\';\'&&node._fold_r();if (has(parse_accepts,data)&&parse_accepts[data]===(node.r&&node.r.r&&node.r.r.data))node._fold_r().pop()._fold_r();else if (has(parse_accepts,data)&&parse_accepts[data]===(node.r&&node.r.data))node._fold_r()}else if (has(parse_r_optional,data))node.r&&node.r.data!==\';\'&&node._fold_r();for (var i=all_nodes.length-1,_;_=all_nodes[i],i>=0; --i)_.r&&_._wrap(new syntax_node(\'i;\')).p._fold_r();for (var i=0,l=invocation_nodes.length,_,child;_=invocation_nodes[i],i<l; ++i)(child=_[1]=_[1][0])&&(child.p=_);while (head.p)head=head.p;for (var i=all_nodes.length-1;i>=0; --i)delete all_nodes[i].p;return head},macro_array_push=Array.prototype.push,macro_try_match=function (pattern,t){if (pattern.data===\'_\')return [t];if (pattern.data!==t.data||pattern.length!==t.length)return null;for (var i=0,l=pattern.length,wildcards=[],match=null;i<l; ++i)if (match=macro_try_match(pattern[i],t[i]))macro_array_push.apply(wildcards,match);else return null;return wildcards},macro_expand=function (t,macros,expanders,context){return t.rmap(function (n){for (var i=macros.length-1,macro,match,replacement;i>=0&&(macro=macros[i]); --i)if ((match=macro_try_match(macro,n))&&(replacement=expanders[i].apply(context,match)))return replacement})},compile=function (tree,environment){var vars=[],values=[],bindings=merge({},environment||{},tree.bindings()),s=gensym();for (var k in bindings)if (has(bindings,k))vars.push(k),values.push(bindings[k]);var code=map(function (v){return v===\'this\'?\'\':\'var \'+v+\'=\'+s+\'.\'+v},vars).join(\';\')+\';return(\'+tree.serialize()+\')\';try {return (new Function(s,code)).call(bindings[\'this\'],bindings)}catch (e){throw new Error(\'Caught \'+e+\' while compiling \'+code)}},associator_for=function (f){return function (name,behavior,value){return f[name]=(f.behaviors[f.attributes[name]=behavior]||id).call(f,value),f}},shallow_copy=function (x){return x&&(x.constructor===Array?x.slice():x.clone?x.clone():merge({},x))},copy_of=function (f){var g=merge(function (){return g.init.apply(g,arguments)},{behaviors:shallow_copy(f.behaviors),attributes:{}});return se(g,function (g){(g.associate=associator_for(g))(\'behavior\',\'method\',function (name,definition){this.behaviors[name]=definition;return this.associate(name,\'method\',function (attribute,value){return this.associate(attribute,name,value)})}).behavior(\'method\',g.behaviors.method);for (var k in f.attributes)has(f.attributes,k)&&g.associate(k,f.attributes[k],f[k])})},replica=se(function (){return copy_of({behaviors:{method:function (v){return bind(v,this)}}}).behavior(\'field\').behavior(\'shallow\',shallow_copy)},function (f){f.init=f}),configurable=function (f){return f.shallow(\'configurations\',{}).shallow(\'has\',{}).method(\'configuration\',function (name,f){this.configurations[name]=f;return this}).method(\'namespace\',function (s){return this[s]||this.shallow(s,{})[s]}).method(\'clone\',function (){return arguments.length?this.clone().configure.apply(null,arguments):copy_of(this)}).method(\'configure\',function (){for (var i=0,l=arguments.length,_;_=arguments[i],i<l; ++i)if (_.constructor===String)for (var cs=qw(arguments[i]),j=0,lj=cs.length;_=cs[j],j<lj; ++j)if (this.configurations[_])this.has[_]||(this.has[_]=this.configurations[_].call(this,this)||this);else throw new Error(\'error: configuration "\'+_+\'" does not exist\');else _ instanceof Array?this.configure.apply(this,_.slice()):_.call(this,this);return this})},macroexpansion=function (f){return f.shallow(\'macro_patterns\',[]).method(\'macro\',function (pattern,expansion){return this.macro_patterns.push(pattern),this.macro_expanders.push(expansion),this}).shallow(\'macro_expanders\',[]).method(\'macroexpand\',function (t){return macro_expand(t,this.macro_patterns,this.macro_expanders,this)}).method(\'rmacro\',function (pattern,expander){if ( !expander.apply)throw new Error(\'rmacro: Cannot define macro with non-function expander\');else return this.macro(pattern,function (){var t=expander.apply(this,arguments);return t&&this.macroexpand(t)})})},composition=function (f){return f.shallow(\'after_functions\',[]).method(\'after\',function (){if (arguments.length){for (var i=0,l=arguments.length;i<l; ++i)this.after_functions.push(arguments[i]);return this}else return this.after_functions})},caterwaul_core=function (f){return configurable(f).configure(macroexpansion,composition).method(\'tconfiguration\',function (configs,name,f,bindings){this.configurations[name]=this.clone(configs)(f,bindings);return this}).field(\'syntax\',syntax_node).field(\'ref\',ref).field(\'parse\',parse).field(\'compile\',compile).field(\'gensym\',gensym).field(\'map\',map).field(\'self\',self).field(\'macroexpansion\',macroexpansion).field(\'replica\',replica).field(\'configurable\',configurable).field(\'caterwaul\',caterwaul_core).field(\'decompile\',parse).field(\'composition\',composition).field(\'global\',function (){return caterwaul_global}).method(\'init\',function (f,environment){var result=f.constructor===this.syntax?this.macroexpand(f):this.compile(this(this.decompile(f)),environment);if (f.constructor===this.syntax)for (var i=0,l=this.after_functions.length;i<l; ++i)result=this.after_functions[i](result);return result}).method(\'reinitialize\',function (transform,erase_configurations){var c=transform(this.self),result=c(c).deglobalize();erase_configurations||(result.configurations=this.configurations);return result}).shallow(\'util\',{extend:extend,merge:merge,se:se,macro_try_match:macro_try_match,id:id,bind:bind,map:map,qw:qw}).method(\'magic\',(function (table){return function (name){return table[name]||(table[name]={})}})({}))},caterwaul_global=caterwaul=caterwaul_core(merge(replica(),{deglobalize:function (){caterwaul=_caterwaul;return this}}));return caterwaul_global});caterwaul.configuration(\'std.qs\',function (){this.macro(this.parse(\'qs[_]\'),function (tree){return new this.ref(tree)}).macro(this.parse(\'qse[_]\'),function (tree){return new this.ref(this.macroexpand(tree))}).macro(this.parse(\'literal[_]\'),function (tree){return tree})}).tconfiguration(\'std.qs\',\'std.qg\',function (){this.rmacro(qs[qg[_]],function (expression){return expression.as(\'(\')})}).tconfiguration(\'std.qs std.qg\',\'std.fn\',function (){this.configure(\'std.qg\').rmacro(qs[fn[_][_]],function (vars,expression){return qs[qg[function (vars){return expression}]].replace({vars:vars,expression:expression})}).rmacro(qs[fn_[_]],function (expression){return qs[qg[function (){return expression}]].replace({expression:expression})}).rmacro(qs[fb[_][_]],function (vars,expression){return qse[fn[_t][fn_[fn[vars][e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),vars:vars,e:expression})}).rmacro(qs[fb_[_]],function (expression){return qse[fn[_t][fn_[fn_[e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),e:expression})}).rmacro(qs[fc[_][_]],function (vars,body){return qse[qg[fn[vars][body,undefined]]].replace({vars:vars,body:body})}).rmacro(qs[fc_[_]],function (body){return qse[qg[fn[vars][body,undefined]]].replace({body:body})})}).tconfiguration(\'std.qs std.qg std.fn\',\'std.obj\',function (){this.configure(\'std.qg std.fn\').rmacro(qs[_/mb/_],fn[object,method][qse[qg[fn[_o][_o.m&&fn_[_o.m.apply(_o,arguments)]]](o)].replace({_o:this.gensym(),o:object,m:method})]).rmacro(qs[_/mb[_]],fn[object,method][qse[qg[fn[_o,_m][_o[_m]&&fn_[_o[_m].apply(_o,arguments)]]](o,m)].replace({_o:this.gensym(),_m:this.gensym(),o:object,m:method})]).rmacro(qs[_/se._[_]],fn[v,n,b][qse[qg[fn[n][b,n]].call(this,v)].replace({b:b,n:n,v:v})]).rmacro(qs[_/se[_]],fn[v,b][qse[v/se._[b]].replace({b:b,v:v})]).rmacro(qs[_/re._[_]],fn[v,n,b][qse[qg[fn[n][b]].call(this,v)].replace({b:b,n:n,v:v})]).rmacro(qs[_/re[_]],fn[v,b][qse[v/re._[b]].replace({b:b,v:v})])}).tconfiguration(\'std.qs std.qg std.fn\',\'std.bind\',function (){this.configure(\'std.qg\');var lf=fb[form][this.rmacro(form,l_expander)],lsf=fb[form][this.rmacro(form,l_star_expander)],l_star_expander=fb[vars,expression][qs[qg[function (){var vars;return expression}].call(this)].replace({vars:this.macroexpand(vars),expression:expression})],l_expander=fb[vars,expression][vars=this.macroexpand(vars).flatten(\',\'),qs[qg[function (vars){return e}].call(this,values)].replace({vars:vars.map(fn[n][n[0]]).unflatten(),e:expression,values:vars.map(fn[n][n[1]]).unflatten()})];lf(qs[l[_] in _]),lf(qs[l[_][_]]),lf(this.parse(\'let [_] in _\')),lf(this.parse(\'let [_][_]\')).rmacro(qs[_,where[_]],fn[expression,vars][l_expander(vars,expression)]);lsf(qs[l*[_] in _]),lsf(qs[l*[_][_]]),lsf(this.parse(\'let*[_] in _\')),lsf(this.parse(\'let*[_][_]\')).rmacro(qs[_,where*[_]],fn[expression,vars][l_star_expander(vars,expression)])}).tconfiguration(\'std.qs std.qg std.fn\',\'std.lvalue\',function (){this.rmacro(qs[_(_)=_],fn[base,params,value][qs[base=qg[function (params){return value}]].replace({base:base,params:params,value:value})])}).tconfiguration(\'std.qs std.fn\',\'std.cond\',function (){this.configure(\'std.qg\').rmacro(qs[_,when[_]],fn[expression,cond][qs[qg[l]&&qg[r]].replace({l:cond,r:expression})]).rmacro(qs[_,unless[_]],fn[expression,cond][qs[ !qg[l]&&qg[r]].replace({l:cond,r:expression})])}).tconfiguration(\'std.qs std.fn std.bind std.lvalue\',\'std.defmacro\',function (){l[wildcard(n)=n.data.constructor===String&&n.data.charAt(0)===\'_\'&&\'_\'] in this.macro(qs[defmacro[_][_]],fn[pattern,expansion][this.rmacro(pattern,this.compile(this.macroexpand(expansion))),qs[null]]).macro(qs[defsubst[_][_]],fn[pattern,expansion][this.rmacro(pattern.rmap(wildcard),l[wildcards=pattern.collect(wildcard)] in fn_[l[hash={},as=arguments][this.util.map(fn[v,i][hash[v.data]=as[i]],wildcards),expansion.replace(hash)]]),qs[null]])}).tconfiguration(\'std.qs std.fn std.bind\',\'std.with_gensyms\',function (){this.rmacro(qs[with_gensyms[_][_]],fn[vars,expansion][l[bindings={}][vars.flatten(\',\').each(fb[v][bindings[v.data]=this.gensym()]),qs[qs[_]].replace({_:expansion.replace(bindings)})]])}).tconfiguration(\'std.qs std.fn\',\'std.compile_eval\',function (){this.macro(qs[compile_eval[_]],fn[e][new this.ref(this.compile(this.macroexpand(qs[fn_[_]].replace({_:e}))).call(this))])}).tconfiguration(\'std.qs std.fn\',\'std.ref\',function (){this.macro(qs[caterwaul],fn_[new this.ref(this)])}).tconfiguration(\'std.qs std.bind std.lvalue\',\'std.locally\',function (){l*[t=this,handler(c,e)=t.clone(c.is_string()?c.as_escaped_string():c.data).macroexpand(e)] in this.macro(qs[locally[_][_]],handler).macro(qs[locally._[_]],handler)}).tconfiguration(\'std.qs std.fn std.bind\',\'std.string\',function (){this.rmacro(qs[_],fn[string][string.is_string()&&/#\\{[^\\}]+\\}/.test(string.data)&&l*[q=string.data.charAt(0),s=string.as_escaped_string(),eq=new RegExp(\'\\\\\\\\\'+q,\'g\'),strings=s.split(/#\\{[^\\}]+\\}/),xs=[],result=new this.syntax(\'+\')][s.replace(/#\\{([^\\}]+)\\}/g,fn[_,s][xs.push(s),\'\']),this.util.map(fb[x,i][result.push(new this.syntax(q+(i<strings.length?strings[i]:\'\')+q)).push(new this.syntax(\'(\',this.parse(xs[i].replace(eq,q))))],xs),new this.syntax(\'(\',result.push(new this.syntax(q+(xs.length<strings.length?strings[strings.length-1]:\'\')+q)).unflatten())]])}).configuration(\'std\',function (){this.configure(\'std.qs std.qg std.bind std.lvalue std.cond std.fn std.obj std.defmacro std.with_gensyms std.ref std.locally std.compile_eval std.string\')});caterwaul.tconfiguration(\'std\',\'opt.unroll\',function (){this.rmacro(qs[opt.unroll[_,_][_]],fn[variable,iterations,body][with_gensyms[l,rs,es,j][qg[function (l){for (var rs=l>=0&&l>>3,es=l>=0&&l&7,_i_=0;_i_<es; ++_i_)_body_;for (var j=0;j<rs; ++j){_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++};return l}].call(this,_iterations_)].replace({_i_:variable,_body_:body,_iterations_:iterations})])});caterwaul.configuration(\'opt\',function (){this.configure(\'opt.unroll\')});caterwaul.configuration(\'continuation.core\',function (){this.shallow(\'continuation\',{})}).tconfiguration(\'std\',\'continuation.unwind\',function (){this.configure(\'std.fn continuation.core\').continuation/se[_.unwind_protect=function (escape,f){try {return f()}catch (e){return escape(e)}},_.unwind=function (e){throw e}];this.rmacro(qs[unwind_protect[_][_]],fn[escape,body][qse[_f(fb[e][_escape],fb_[_body])].replace({_f:qs[caterwaul.continuation.unwind_protect],_escape:escape,_body:body})]).rmacro(qs[unwind[_]],fn[e][qs[caterwaul.continuation.unwind(_e)].replace({_e:e})])}).tconfiguration(\'std\',\'continuation.cps\',function (){l*[cps_convert(v,f,b,bound)=qse[l[_=_c][_f]].replace({_c:caterwaul.macroexpand(qs[_f[_v][_b]].replace({_f:bound?qs[fb]:qs[fn]})).replace({_v:v.as(\'(\')[0],_b:b}),_f:f}),l_cps_def(t,form,bound)=l[inductive(cs,v,f,b)=qs[l/cps[cs][_f]].replace({cs:cs,_f:cps_convert(v,f,b,bound)}),base(v,f,b)=cps_convert(v,f,b,bound)] in t.rmacro(qs[l/_form[_,_< -_] in _].replace({_form:form}),inductive).rmacro(caterwaul.parse(\'let/#{form.serialize()}[_, _ <- _] in _\'),inductive).rmacro(qs[l/_form[_< -_] in _].replace({_form:form}),base).rmacro(caterwaul.parse(\'let/#{form.serialize()}[   _ <- _] in _\'),base).rmacro(qs[l/_form[_,_< -_][_]].replace({_form:form}),inductive).rmacro(caterwaul.parse(\'let/#{form.serialize()}[_, _ <- _][_]\'),inductive).rmacro(qs[l/_form[_< -_][_]].replace({_form:form}),base).rmacro(caterwaul.parse(\'let/#{form.serialize()}[   _ <- _][_]\'),base),cps_def(t,form,bound)=t.rmacro(qs[_/_form[_]].replace({_form:form}),fn[f,b][qse[_f/_form._[_b]].replace({_form:form,_f:f,_b:b})]).rmacro(qs[_/_form._[_]].replace({_form:form}),fn[f,v,b][qse[l[_=_c][_f]].replace({_c:caterwaul.macroexpand(qs[_f[_v][_b]].replace({_f:bound?qs[fb]:qs[fn]})).replace({_v:v,_b:b}),_f:f})])] in this.configure(\'std.fn continuation.core\')/se[cps_def(_,qs[cps],false),cps_def(_,qs[cpb],true),l_cps_def(_,qs[cps],false),l_cps_def(_,qs[cpb],true)]}).tconfiguration(\'std\',\'continuation.delimited\',function (){l[magic=this.configure(\'std.qg continuation.core\').continuation.magic=this.magic(\'continuation.delimited\')] in this.continuation/se[_.call_cc=function (f){var escaped=false,cc=function (x){escaped=true;throw x},frame={magic:magic,continuation:f,parameters:[cc]};try {while ((frame=frame.continuation.apply(this,frame.parameters))&&frame&&frame.magic===magic);return frame}catch (e){if (escaped)return e;else throw e}},_.call_tail()={magic:magic,continuation:this,parameters:arguments}];this.rmacro(qs[call/cc[_]],fn[f][qs[qg[caterwaul.continuation.call_cc.call(this,_f)]].replace({_f:f})]).rmacro(qs[call/tail[_(_)]],fn[f,args][qs[qg[caterwaul.continuation.call_tail.call(_f,_args)]].replace({_f:f,_args:args})])}).configuration(\'continuation\',function (){this.configure(\'continuation.core continuation.unwind continuation.cps continuation.delimited\')});caterwaul.tconfiguration(\'std\',\'seq.core\',function (){this.shallow(\'seq\',{core:fn_[null]/se[_.prototype=[]/se.p[p.constructor=_]]})}).tconfiguration(\'std opt\',\'seq.finite.core\',function (){this.configure(\'seq.core\').seq.finite=fc[xs][this.length=this.l=xs?opt.unroll[i,xs.size?xs.size():xs.length][this[i]=xs[i]]:0]/se.c[c.prototype=new this.seq.core()/se[_.size()=this.l||this.length,_.slice()=[]/se[opt.unroll[i,this.size()][_.push(this[i])]],_.constructor=c]]}).tconfiguration(\'std\',\'seq.finite.serialization\',function (){this.configure(\'seq.finite.core\').seq.finite.prototype/se[_.toString()=\'seq[#{this.slice().join(", ")}]\',_.join(x)=this.slice().join(x)]}).tconfiguration(\'std opt\',\'seq.finite.mutability\',function (){l[push=Array.prototype.push,slice=Array.prototype.slice] in this.configure(\'seq.finite.core\').seq.finite.prototype/se[_.push()=l[as=arguments] in opt.unroll[i,as.length][this[this.l++]=as[i]]/re[this.length=this.l,this],_.pop()=this[ --this.l]/se[delete this[this.length=this.l]],_.concat(xs)=new this.constructor(this)/se[_.push.apply(_,slice.call(xs))]]}).tconfiguration(\'std\',\'seq.finite.object\',function (){l[own=Object.prototype.hasOwnProperty] in this.configure(\'seq.finite.core\').seq.finite/se[_.keys(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push(k)})()],_.values(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push(o[k])})()],_.pairs(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push([k,o[k]])})()],_.prototype.object(o)=(o||{})/se[this.each(fn[p][_[p[0]]=p[1]])]]}).tconfiguration(\'std opt\',\'seq.finite.traversal\',function (){this.configure(\'seq.finite.core seq.finite.mutability\').seq.finite.prototype/se[_.map(f)=new this.constructor()/se[opt.unroll[i,this.l][_.push(f.call(this,this[i],i))]],_.filter(f)=new this.constructor()/se[opt.unroll[i,this.l][_.push(this[i]),when[f.call(this,this[i],i)]]],_.each(f)=this/se[opt.unroll[i,_.l][f.call(_,_[i],i)]],_.reversed()=new this.constructor()/se[l[l=this.l] in opt.unroll[i,l][_.push(this[l-i-1])]],_.flat_map(f)=new this.constructor()/se[this.each(fn[x,xi][(f.call(this,x,xi)/re.xs[xs.each?xs:new this.constructor(xs)]).each(fn[x][_.push(x)])])],_.foldl(f,x)=l[x=arguments.length>1?x:this[0],xi=2-arguments.length][opt.unroll[i,this.l-xi][x=f.call(this,x,this[i+xi],i+xi)],x,when[this.l>=xi]],_.foldr(f,x)=l[x=arguments.length>1?x:this[this.l-1],xi=3-arguments.length,l=this.l][opt.unroll[i,l-(xi-1)][x=f.call(this,this[l-(i+xi)],x,l-(i+xi))],x,when[l>=xi-1]]]}).tconfiguration(\'std opt\',\'seq.finite.zip\',function (){this.configure(\'seq.finite.traversal\').seq.finite/se[_.prototype.zip()=l[as=new seq([this].concat(slice.call(arguments))),options={f:fn_[new seq(arguments)],outer:false}][caterwaul.util.merge(options,as.pop()),when[as[as.size()-1].constructor===Object],l[l=as.map(fn[x][x.size?x.size():x.length]).foldl(options.outer?fn[x,y][Math.max(x,y)]:fn[x,y][Math.min(x,y)]),f=options.f] in new this.constructor()/se[opt.unroll[i,l][_.push(f.apply({i:i},as.map(fn[x][x[i]]).slice()))]]],where[seq=_,slice=Array.prototype.slice]]}).tconfiguration(\'std opt continuation\',\'seq.finite.quantification\',function (){this.configure(\'seq.finite.core\').seq.finite.prototype/se[_.exists(f)=call/cc[fb[cc][opt.unroll[i,this.l][f.call(this,this[i],i)/re[_&&cc(_)]],false]],_.forall(f)= !this.exists(fn_[ !f.apply(this,arguments)])]}).tconfiguration(\'std\',\'seq.infinite.core\',function (){this.configure(\'seq.core\').seq.infinite=fn_[null]/se[_.prototype=new this.seq.core()/se[_.constructor=ctor],where[ctor=_]]/se[_.def(name,ctor,h,t)=i[name]=ctor/se[_.prototype=new i()/se[_.h=h,_.t=t,_.constructor=ctor]],where[i=_],_.def(\'cons\',fn[h,t][this._h=h,this._t=t],fn_[this._h],fn_[this._t]),_.def(\'k\',fn[x][this._x=x],fn_[this._x],fn_[this])]}).tconfiguration(\'std\',\'seq.infinite.y\',function (){this.configure(\'seq.infinite.core\').seq.infinite.def(\'y\',fc[f,x][this._f=f,this._x=x],fn_[this._x],fn_[new this.constructor(this._f,this._f(this._x))])}).tconfiguration(\'std continuation\',\'seq.infinite.transform\',function (){this.configure(\'seq.infinite.core\').seq.infinite/se[_.prototype.map(f)=new _.map(f,this),_.def(\'map\',fc[f,xs][this._f=f,this._xs=xs],fn_[this._f(this._xs.h())],fn_[new this.constructor(this._f,this._xs.t())]),_.prototype.filter(f)=new _.filter(f,this),_.def(\'filter\',fc[f,xs][this._f=f,this._xs=l*[next(s)(cc)=f(s.h())?cc(s):call/tail[next(s.t())(cc)]] in call/cc[next(xs)]],fn_[this._xs.h()],fn_[new this.constructor(this._f,this._xs.t())])]}).tconfiguration(\'std continuation\',\'seq.infinite.traversal\',function (){l[finite=this.configure(\'seq.finite.core seq.finite.mutability\').seq.finite] in this.configure(\'seq.infinite.core\').seq.infinite.prototype/se[_.drop(f)=l*[next(s)(cc)=f(s.h())?call/tail[next(s.t())(cc)]:cc(s)] in call/cc[next(this)],_.take(f)=l*[xs=new finite(),next(s)(cc)=l[h=s.h()][f(h)?(xs.push(h),call/tail[next(s.t())(cc)]):cc(xs)]] in call/cc[next(this)]]}).tconfiguration(\'std opt\',\'seq.numeric\',function (){this.configure(\'seq.infinite.core seq.infinite.y seq.finite.core\').seq/se[_.naturals_from(x)=new _.infinite.y(fn[n][n+1],x),_.naturals=_.naturals_from(0),_.n(l,u,s)=l[lower=arguments.length>1?l:0,upper=arguments.length>1?u:l][l[step=Math.abs(s||1)*(lower<upper?1: -1)] in new _.infinite.y(fn[n][n+step],lower).take(fn[x][(upper-lower)*(upper-x)>0])]]}).tconfiguration(\'std opt continuation\',\'seq.dsl\',function (){this.configure(\'seq.core seq.infinite.y seq.finite.core seq.finite.zip seq.finite.traversal seq.finite.mutability\').seq.dsl=caterwaul.global().clone()/se[_.prefix_substitute(tree,prefix)=tree.rmap(fn[n][new n.constructor(\'#{prefix}#{n.data.substring(1)}\'),when[n.data.charAt(0)===\'_\']]),_.define_functional(op,expansion,xs)=trees_for(op).map(fn[t,i][_.macro(t,fn[l,v,r][expansion.replace({_x:_.macroexpand(l),_y:i>=8?v:qs[fn[xs][y]].replace({fn:i&2?qs[fb]:qs[fn],xs:_.prefix_substitute(xs,i&1?v.data:\'_\'),y:(i&4?_.macroexpand:fn[x][x])(r||v)})})])]),_.define_functional/se[_(\'%\',qs[_x.filter(_y)],qs[_,_i]),_(\'*\',qs[_x.map(_y)],qs[_,_i]),_(\'/\',qs[_x.foldl(_y)],qs[_,_0,_i]),_(\'%!\',qs[_x.filter(c(_y))].replace({c:not}),qs[_,_i]),_(\'*!\',qs[_x.each(_y)],qs[_,_i]),_(\'/!\',qs[_x.foldr(_y)],qs[_,_0,_i]),_(\'&\',qs[_x.forall(_y)],qs[_,_i]),_(\'|\',qs[_x.exists(_y)],qs[_,_i]),_(\'-\',qs[_x.flat_map(_y)],qs[_,_i]),_(\'>>\',qs[_x.drop(_y)],qs[_]),_(\'<<\',qs[_x.take(_y)],qs[_]),_(\'>>>\',qs[new caterwaul.seq.infinite.y(_y,_x)],qs[_])],seq(qw(\'> < >= <= == !=\')).each(fn[op][_.macro(qs[_+_].clone()/se[_.data=op],rxy(qs[qg[_x].size()+qg[_y].size()].clone()/se[_.data=op]))]),l[e(x)=_.macroexpand(x)] in _.macro/se[_(qs[_&&_],rxy(qse[qg[l[xp=_x][xp&&xp.size()?_y:xp]]])),_(qs[_||_],rxy(qse[qg[l[xp=_x][xp&&xp.size()?xp:_y]]])),_(qs[_===_],rxy(qs[qg[l[xp=_x,yp=_y][xp===yp||xp.size()===yp.size()&&xp.zip(yp).forall(fn[p][p[0]===p[1]])]]])),_(qs[_!==_],rxy(qs[qg[l[xp=_x,yp=_y][xp!==yp&&(xp.size()!==yp.size()||xp.zip(yp).exists(fn[p][p[0]!==p[1]]))]]])),_(qs[_^_],rxy(qs[_x.zip(_y)])),_(qs[_+_],rxy(qs[_x.concat(_y)])),_(qs[ !_],rxy(qs[_x.object()])),_(qs[_,_],rxy(qs[_x,_y])),_(qs[ ~_],rxy(qs[qg[new caterwaul.seq.finite(_x)]])),_(qs[_?_:_],fn[x,y,z][qs[x?y:z].replace({x:e(x),y:e(y),z:e(z)})]),l[rx(t)(x,y)=t.replace({_x:e(x),_y:y})][_(qs[_(_)],rx(qs[_x(_y)])),_(qs[_[_]],rx(qs[_x[_y]])),_(qs[_._],rx(qs[_x._y])),_(qs[_].as(\'(\'),rx(qs[qg[_x]]))],_(qs[ +_],fn[x][x]),l[rx(t)(x)=t.replace({x:x})][_(qs[N],fn_[qs[caterwaul.seq.naturals]]),_(qs[N[_]],rx(qs[caterwaul.seq.naturals_from(x)])),_(qs[n[_]],rx(qs[caterwaul.seq.n(x)]))],seq(qw(\'sk sv sp\')).zip(qw(\'keys values pairs\')).each(fb[p][_(qs[p[_]].replace({p:p[0]}),fn[x][qs[caterwaul.seq.finite.r(x)].replace({r:p[1],x:x})])])],this.rmacro(qs[seq[_]],_.macroexpand),where*[rxy(tree)(x,y)=tree.replace({_x:_.macroexpand(x),_y:y&&_.macroexpand(y)}),seq=fb[xs][new this.seq.finite(xs)],prepend(operator)(x)=qs[ -x].replace({x:x})/se[_.data=operator],tree_forms=l*[base=seq([qs[[_]],qs[_[_]]]),mod(fs,op)=fs.concat(fs.map(prepend(op)))] in mod(mod(base,\'u-\'),\'u~\').concat(seq([qs[ +_]])),template(op)(t)=qs[_+x].replace({x:t})/se[_.data=op],qw=caterwaul.util.qw,not=qs[qg[fn[f][fn_[ !f.apply(this,arguments)]]]],trees_for(op)=tree_forms/re[op.charAt(op.length-1)===\'!\'?_.map(prepend(\'u!\')):_]/re[_.map(template(op.replace(/!$/,\'\')))]]]}).configuration(\'seq\',function (){this.configure(\'seq.core seq.finite.core seq.finite.object seq.finite.mutability seq.finite.traversal seq.finite.zip seq.finite.quantification \'+\'seq.finite.serialization seq.infinite.core seq.infinite.y seq.infinite.transform seq.infinite.traversal \'+\'seq.numeric seq.dsl\')});caterwaul.tconfiguration(\'std seq\',\'heap\',function (){this.heap(less)=fc_[null]/se.c[c.prototype=new caterwaul.seq.finite()/se[_.constructor=c]/se[_.insert(x)=this.push(x).heapify_up(this.size()-1),_.root()=this[0],_.rroot()=this[0]/se[this.pop()/se[this[0]=_,this.heapify_down(0),when[this.size()]]],_.swap(i,j)=this/se[_[j]=_[i],_[i]=temp,where[temp=_[j]]],_.heapify_up(i)=this/se[_.swap(i,p).heapify_up(p),when[less.call(_,_[i],_[p])],where[p=i>>1]],_.heapify_down(i)=this/se[_.swap(lr,i).heapify_down(lr),unless[lr===i],where*[s=_.size(),r=i+1<<1,l=r-1,ll=l<s&&less.call(_,_[l],_[i])?l:i,lr=r<s&&less.call(_,_[r],_[ll])?r:ll]]]]});caterwaul.tconfiguration(\'std seq continuation\',\'memoize\',function (){this.namespace(\'memoize\')/se.m[m.wrap(f)=fn_[l[as=arguments,start= +new Date()] in unwind_protect[{error:e}][{result:f.apply(this,as)}]/se[_.time= +new Date()-start]]/se[_.original=f],m.perform(result)=result.error?unwind[result.error]:result.result,m.from(proxy)=fn[f][l[state={},g=m.wrap(f)] in fn_[m.perform(proxy.call(state,this,arguments,g))]]]});caterwaul.tconfiguration(\'std seq continuation memoize\',\'parser.core\',function (){this.namespace(\'parser\')/se[_.parse_state(input,i,result,memo)=undefined/se[this.input=input,this.i=i,this.result=result,this.memo=memo],_.parse_state/se.s[s.from_input(input)=new _.parse_state(input,0,null,{}),s.prototype/se[_.accept(i,r)=new this.constructor(this.input,i,r,this.memo),_.has_input()=this.i<this.input.length,_.toString()=\'ps[#{this.input.substr(this.i)}, #{this.result}]\']],_.memoize=caterwaul.memoize.from(fn[c,as,f][k in m?m[k]:(m[k]=f.apply(c,as)),where[k=\'#{f.original.memo_id}|#{as[0].i}\',m=as[0].memo||(as[0].memo={})]]),_.promote_non_states(f)=fn[state][state instanceof _.parse_state?f.call(this,state):f.call(this,_.parse_state.from_input(state))/re[_&&_.result]],_.identify(f)=f/se[_.memo_id=caterwaul.gensym()],_.parser(f)=_.promote_non_states(_.memoize(_.identify(f))),_.defparser(name,f)=_.parsers[name]()=_.parser(f.apply(this,arguments)),_.parsers={}]}).tconfiguration(\'std seq continuation\',\'parser.c\',function (){this.configure(\'parser.core\').parser.defparser(\'c\',fn[x,l][x.constructor===String?fn[st][st.accept(st.i+x.length,x),when[x===st.input.substr(st.i,x.length)]]:x instanceof Array?l[index=index_entries(x)] in fn[st][check_index(index,st.input,st.i)/re[_&&st.accept(st.i+_.length,_)]]:x.constructor===RegExp?l[x=add_absolute_anchors_to(x)] in fn[st][fail_length(x,st.input,st.i,l)/re[_>l&&split_lengths(x,st.input,st.i,l,_)/re[st.accept(st.i+_,x.exec(st.input.substr(st.i,_)))]]]:x.constructor===Function?fn[st][x.call(st,st.input,st.i)/re[_&&st.accept(st.i+_,st.input.substr(st.i,_))]]:l[index=index_entries(seq[sk[x]])] in fn[st][check_index(index,st.input,st.i)/re[_&&st.accept(st.i+_.length,x[_])]],where*[check_index(i,s,p)=seq[i|[_[\'@#{s}\']&&s,where[s=s.substr(p,_.length)]]],index_entries(xs)=l*[xsp=seq[ ~xs],ls=seq[sk[seq[ !(xsp*[[_.length,true]])]]*[Number(_)]]] in seq[ ~ls.slice().sort(fn[x,y][y-x])* ~l[ !(xsp%[_.length===l]*[[\'@#{_}\',true]]+[[\'length\',l]])]],add_absolute_anchors_to(x)=l[parts=/^\\/(.*)\\/(\\w*)$/.exec(x.toString())] in new RegExp(\'^#{parts[1]}$\',parts[2]),fail_length(re,s,p,l)=re.test(s.substr(p,l))?p+(l<<1)<=s.length?fail_length(re,s,p,l<<1):l<<1:l,split_lengths(re,s,p,l,u)=l*[b(l,u)=l+1<u?(l+(u-l>>1))/re.m[re.test(s.substr(p,m))?b(m,u):b(l,m)]:l] in b(l,u)]])}).tconfiguration(\'std opt seq continuation\',\'parser.seq\',function (){this.configure(\'parser.core\').parser.defparser(\'seq\',fn_[l[as=arguments] in fn[state][call/cc[fn[cc][opt.unroll[i,as.length][(state=as[i](state))?result.push(state.result):cc(false)],state.accept(state.i,result)]],where[result=[]]]])}).tconfiguration(\'std seq\',\'parser.alt\',function (){this.configure(\'parser.core\').parser.defparser(\'alt\',fn_[l[as=seq[ ~arguments]] in fn[state][seq[as|[_(state)]]]])}).tconfiguration(\'std opt seq continuation\',\'parser.times\',function (){this.configure(\'parser.core\').parser.defparser(\'times\',fn[p,lower,upper][fn[state][call/cc[fn[cc][opt.unroll[i,lower][ ++count,(state=p(state))?result.push(state.result):cc(false)],true]]&&call/cc[l*[loop(cc)=( !upper||count++<upper)&&state.has_input()&&p(state)/se[state=_,when[_]]?result.push(state.result)&&call/tail[loop(cc)]:cc(state.accept(state.i,result))] in loop],where[count=0,result=[]]]])}).tconfiguration(\'std seq continuation\',\'parser.opt\',function (){this.configure(\'parser.core\').parser.defparser(\'opt\',fn[p][fn[state][state.accept(n,r),where*[s=p(state),n=s?s.i:state.i,r=s&&s.result]]])}).tconfiguration(\'std seq continuation\',\'parser.match\',function (){this.configure(\'parser.core\').parser/se[_.defparser(\'match\',fn[p][fn[state][p(state)/re[_&&state.accept(state.i,state.result)]]]),_.defparser(\'reject\',fn[p][fn[state][p(state)/re[ !_&&state.accept(state.i,null)]]])]}).tconfiguration(\'std seq continuation\',\'parser.bind\',function (){this.configure(\'parser.core\').parser/se[_.defparser(\'bind\',fn[p,f][fn[state][p(state)/re[_&&_.accept(_.i,f.call(_,_.result))]]])]}).tconfiguration(\'std seq continuation\',\'parser.dsl\',function (){this.configure(\'parser.core\').rmacro(qs[peg[_]],fn[x][qs[qg[l*[_bindings][_parser]]].replace({_bindings:new this.syntax(\',\',seq[sp[this.parser.parsers]*[qs[_x=_y].replace({_x:_[0],_y:new outer.ref(_[1])})]]),_parser:this.parser.dsl.macroexpand(x)}),where[outer=this]]),this.parser.dsl=caterwaul.global().clone()/se.dsl[dsl.macro/se[_(qs[_(_)],fn[x,y][qs[_x(_y)].replace({_x:e(x),_y:y})]),_(qs[_/_],fb(\'/\',\'alt\')),_(qs[_%_],fb(\'%\',\'seq\')),_(qs[_>>_],b(\'bind\')),_(qs[[_]],u(\'opt\')),_(qs[_].as(\'(\'),fn[x][e(x).as(\'(\')]),_(qs[_[_]],fn[x,l][qs[times(_x,_l)].replace({_x:e(x),_l:l})]),_(qs[_[_,_]],fn[x,l,u][qs[times(_x,_l,_u)].replace({_x:e(x),_l:l,_u:u})]),where*[e=dsl.macroexpand,fb(op,name)(x,y)=qs[_name(_x,_y)].replace({_name:name,_x:x.flatten(op).map(e)/se[_.data=\',\'],_y:e(y)}),b(name)(x,y)=qs[_name(_x,_y)].replace({_name:name,_x:e(x),_y:y}),u(name)(x)=qs[_name(_x)].replace({_name:name,_x:e(x)})]]]}).configuration(\'parser\',function (){this.configure(\'parser.core parser.c parser.seq parser.alt parser.times parser.opt parser.match parser.bind parser.dsl\')});');
meta::configuration('dependencies', <<'__8d1d336cf688a49488d1f93ae2ad4afa');
# Named dependencies:
caterwaul.all.js:     http://spencertipping.com/caterwaul/caterwaul.all.min.js
#montenegro.server.js: http://spencertipping.com/montenegro/montenegro.server.js
__8d1d336cf688a49488d1f93ae2ad4afa
meta::data('default-action', 'shell');
meta::data('libraries', <<'__cca38bdfe6664615b581ec6dff43cf46');
# URLs of libraries to be downloaded into the lib/ directory.
http://spencertipping.com/caterwaul/caterwaul.all.js
http://spencertipping.com/montenegro/montenegro.server.js
__cca38bdfe6664615b581ec6dff43cf46
meta::data('license', <<'__3c6177256de0fddb721f534c3ad8c0ee');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__3c6177256de0fddb721f534c3ad8c0ee
meta::data('main', 'server.js');
meta::data('name', 'node-base');
meta::data('quiet', '1');
meta::data('watching', '1');
meta::function('alias', <<'__28744564997657da45ab16cd5b441104');
my ($name, @stuff) = @_;
return ls('-a', '^alias::') unless defined $name;
@stuff ? around_hook('alias', @_, sub {associate("alias::$name", join ' ', @stuff)}) : retrieve("alias::$name") || "Undefined alias $name";
__28744564997657da45ab16cd5b441104
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__c4d52b1d8f52a480f07b81b93c3aac7b');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', hook('set-cc', join(' ', @_))) : retrieve('data::current-continuation');
__c4d52b1d8f52a480f07b81b93c3aac7b
meta::function('child', <<'__f69646398c3123d3d939a7f2b3156606');
around_hook('child', @_, sub {
  my ($child_name) = @_;
  clone($child_name);
  enable();
  qx($child_name update-from $0 -n);
  disable()});
__f69646398c3123d3d939a7f2b3156606
meta::function('clone', <<'__54e00ff2103e54423d4c9febb97ce063');
for (grep length, @_) {
  around_hook('clone', $_, sub {
    hypothetically(sub {
      rm('data::permanent-identity');
      file::write($_, serialize(), noclobber => 1);
      chmod(0700, $_)})})}
__54e00ff2103e54423d4c9febb97ce063
meta::function('cp', <<'__e5fee448a74ecbf4ae215e6b43dfc048');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__e5fee448a74ecbf4ae215e6b43dfc048
meta::function('create', <<'__090c342a2dc304b39c643d53350474a0');
my ($name, $value) = @_;
around_hook('create', $name, $value, sub {
  return edit($name) if exists $data{$name};
  associate($name, defined $value ? $value : '');
  edit($name) unless defined $value});
__090c342a2dc304b39c643d53350474a0
meta::function('current-state', <<'__d83ae43551c0f58d1d0ce576402a315a');
my @valid_keys   = grep ! /^state::/, sort keys %data;
my @ordered_keys = (grep(/^meta::/, @valid_keys), grep(! /^meta::/, @valid_keys));
join "\n", map serialize_single($_), @ordered_keys;
__d83ae43551c0f58d1d0ce576402a315a
meta::function('disable', 'hook(\'disable\', chmod_self(sub {$_[0] & 0666}));');
meta::function('dupdate', <<'__1c0273217c5b9f2756bb14a4a00aa7e2');
# Update the repository based on the dependencies it lists.
use LWP::Simple ();
rm(grep /^cached_dependency::/, keys %data);
my %dependencies = dependencies();

for (keys %dependencies) {
  terminal::info("Retrieving $dependencies{$_} as $_");
  associate("cached_dependency::$_", LWP::Simple::get($dependencies{$_}))}
__1c0273217c5b9f2756bb14a4a00aa7e2
meta::function('edit', <<'__fd926994eabc382472a1d11b61a1dc2e');
my ($name, %options) = @_;
my $extension = extension_for($name);

die "Attribute $name does not exist" unless exists $data{$name};
die "$name is inherited; use 'edit $name -f' to edit anyway" unless is($name, '-u') || exists $options{'-f'};

around_hook('edit', @_, sub {
  associate($name, invoke_editor_on($data{$name} || "# Attribute $name", %options, attribute => $name, extension => $extension),
            execute => $name !~ /^bootstrap::/)});
save() unless $data{'data::edit::no-save'};
'';
__fd926994eabc382472a1d11b61a1dc2e
meta::function('enable', 'hook(\'enable\', chmod_self(sub {$_[0] | $_[0] >> 2}));');
meta::function('export', <<'__388e0cc60507443cb1c0cc3e2658cfef');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__388e0cc60507443cb1c0cc3e2658cfef
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('grep', <<'__a32de7e18e12734fff127c8cb904cf53');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my $pattern              = shift @_ or die 'Must specify a pattern to search for';
my ($options, @criteria) = separate_options(@_);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

my @m_attributes, @m_line_numbers, @m_lines;

for my $k (@attributes) {
  next unless length $k;
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ /$pattern/;
    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        $lines[$_] // ''}} 

if ($$options{'-c'}) {
  s/($pattern)/\033[1;31m\1\033[0;0m/g for @m_lines;
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__a32de7e18e12734fff127c8cb904cf53
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__d74d8e2b611342af6a0897e0bd62e6e6');
my ($hook, @args) = @_;
$transient{active_hooks}{$hook} = 1;
dangerous('', sub {&$_(@args)}) for grep /^hook::${hook}::/, sort keys %data;
@args;
__d74d8e2b611342af6a0897e0bd62e6e6
meta::function('hooks', 'join "\\n", sort keys %{$transient{active_hooks}};');
meta::function('identity', 'retrieve(\'data::permanent-identity\') || associate(\'data::permanent-identity\', fast_hash(rand() . name() . serialize()));');
meta::function('import', <<'__ac86cbe9c9fb12fc8cef2cc88e80c01e');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__ac86cbe9c9fb12fc8cef2cc88e80c01e
meta::function('initial-state', '$transient{initial};');
meta::function('is', <<'__5d4fddb72b0715694b83aa0c925a8d04');
my ($attribute, @criteria) = @_;
my ($options, @stuff) = separate_options(@criteria);
grep $_ eq $attribute, select_keys(%$options);
__5d4fddb72b0715694b83aa0c925a8d04
meta::function('load-state', <<'__ea18db867bd62a294e067f60e6975dcf');
around_hook('load-state', @_, sub {
  my ($state_name) = @_;
  my $state = retrieve("state::$state_name");

  terminal::state('saving current state into _...');
  &{'save-state'}('_');

  delete $data{$_} for grep ! /^state::/, keys %data;
  %externalized_functions = ();

  terminal::state("restoring state $state_name...");
  meta::eval_in($state, "state::$state_name");
  terminal::error(hook('load-state-failed', $@)) if $@;
  reload();
  verify()});
__ea18db867bd62a294e067f60e6975dcf
meta::function('loc', <<'__36e0cabf1fe1c1bcaa3c8c708bd82ca0');
# Counts SLOC, whitespace, and total LOC in the codebase.
hook('before-loc', @_);

my $criteria    = join '|', @_;
my @attributes  = grep s/^sdoc:://, select_keys('--criteria' => $criteria);
my $tcomments   = 0;
my $twhitespace = 0;
my $tsource     = 0;

my $line = sub {
  my ($source, $whitespace, $comments, $name) = @_;
  $source ||= 1;                # Prevent divide-by-zero errors
  sprintf "%5d total, %4d SLOC, %5d[%4d%%] whitespace, %5d[%4d%%] comment [%s]",
          $source + $whitespace + $comments, $source, $whitespace, int($whitespace / $source * 100), $comments, int($comments / $source * 100), $name};

my $loc = sub {
  my @lines    = map split(/\n/, $_), retrieve($_[0]);
  $tcomments   += (my $comments   = grep /^\s*\/\// || /^\s*#/, @lines);
  $twhitespace += (my $whitespace = grep /^\s*$/, @lines);
  $tsource     += (my $source     = @lines - $comments - $whitespace);
  &$line($source, $whitespace, $comments, $_[0])};

terminal::info(map &$loc($_), @attributes);
terminal::info(&$line($tsource, $twhitespace, $tcomments, 'total'));

hook('after-loc', @_);
__36e0cabf1fe1c1bcaa3c8c708bd82ca0
meta::function('lock', 'hook(\'lock\', chmod_self(sub {$_[0] & 0555}));');
meta::function('ls', <<'__acdc3ca5777ab9c7c430d493a7555998');
my ($options, @criteria) = separate_options(@_);
my ($all, $shadows, $dereference, $sizes, $flags) = @$options{qw(-a -s -d -z -l)};
$all   ||= $dereference;
$sizes ||= $flags;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$all ? \@definitions : \@internals} if $sizes;

my %flag_hashes = map {$_ => {map {$_ => 1} select_keys("-$_" => 1)}} qw(m u i) if $flags;
my @flags       = map {my $k = $_; join '', map($flag_hashes{$_}{$k} ? $_ : '-', sort keys %flag_hashes)} @definitions if $flags;

join "\n", map strip($_), split /\n/, table_display($all ? [@definitions] : [grep length, @externals], $dereference ? ([@externals]) : (),
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : ());
__acdc3ca5777ab9c7c430d493a7555998
meta::function('minify', 'node([\'cached_dependency::caterwaul.all.js\', \'js::minify\'], $_[0]);');
meta::function('mv', <<'__52e95180e3c7019116bd798e0da0fdda');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from));
rm($from);
__52e95180e3c7019116bd798e0da0fdda
meta::function('name', <<'__6848cbc257e4b6d7441b25acb04e23c9');
my $name = $0;
$name =~ s/^.*\///;
$name;
__6848cbc257e4b6d7441b25acb04e23c9
meta::function('node', <<'__3522fde8f76947a5f70bca33f1ee0016');
# Runs node on a collection of source files and arguments. The format is:
# node([@source_strings], @process_args);
my ($sources, @args) = @_;

with_exported(@$sources, sub {
  hook('before-node', $_[0], @args);
  sh('node', $_[0], @args);
  hook('after-node', $_[0], @args);
});
__3522fde8f76947a5f70bca33f1ee0016
meta::function('node-custom', <<'__c2f4063798c997ec7f78a3543b1240b3');
# Runs node on a collection of source files and arguments. The format is:
# &{'node-custom'}([@source_strings], [@node_arguments], @process_args);
my ($sources, $node_args, @args) = @_;

with_exported(@$sources, sub {
  hook('before-node-custom', @$node_args, $_[0], @args);
  sh('node', @$node_args, $_[0], @args);
  hook('after-node-custom', @$node_args, $_[0], @args);
});
__c2f4063798c997ec7f78a3543b1240b3
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('perl', <<'__986a274c013b77fe08d29726ce3799fe');
my $result = eval(join ' ', @_);
$@ ? terminal::error($@) : $result;
__986a274c013b77fe08d29726ce3799fe
meta::function('reload', 'around_hook(\'reload\', sub {execute($_) for grep ! /^bootstrap::/, keys %data});');
meta::function('render', <<'__d11b6e7522980db1022b1ccd575bdc30');
hook('before-render');
file::write(attribute($_) .            '.js',       retrieve($_), mkpath => 1) for grep s/^sdoc::js::/js::/ || /^js::/, keys %data;
file::write(attribute(attribute($_)) . '.js.sdocp', retrieve($_), mkpath => 1) for grep s/^sdoc::js::/sdocp::js::/, keys %data;
hook('after-render');
__d11b6e7522980db1022b1ccd575bdc30
meta::function('rm', <<'__7cecfb1691a7bf86741f00058bcc54ca');
around_hook('rm', @_, sub {
  exists $data{$_} or terminal::warning("$_ does not exist") for @_;
  delete @data{@_}});
__7cecfb1691a7bf86741f00058bcc54ca
meta::function('run-forever', <<'__76175932a2d2692fc802856c28d0848d');
# Runs your application indefinitely, restarting each time it fails.
# There's a one-second delay between restarts to prevent a tight loop.
# Takes one argument, which is the function to run forever.
my ($f, @args) = @_;
hook('bin/before-run-forever');
&$f(@args) while sleep 0.1 && ! -f 'stop';
hook('bin/after-run-forever');
__76175932a2d2692fc802856c28d0848d
meta::function('save', 'around_hook(\'save\', sub {dangerous(\'\', sub {file::write($0, serialize()); $transient{initial} = state()}) if verify()});');
meta::function('save-state', <<'__863e4d9fa75ca198ef7a755248d1002a');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
around_hook('save-state', $state_name, sub {
  associate("state::$state_name", &{'current-state'}(), execute => 1)});
__863e4d9fa75ca198ef7a755248d1002a
meta::function('sdoc', <<'__060cfa349e629eb90a82b87a8ba00c1d');
# Applies SDoc processing to a file or attribute. Takes the file or attribute
# name as the first argument and returns the processed text.

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    ;   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/ fig  /|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_$e", split /\n/, $text)}

sub paragraphs {map split(/(\n{2,})/, $_), @_}

my ($filename) = @_;

# Two possibilities here. One is that the filename is an attribute, in which case
# we want to look up the extension in the transients table. The other is that
# it's a real filename.
my ($extension)       = $filename =~ /\.sdoc$/io ? $filename =~ /\.(\w+)\.sdoc$/igo : $filename =~ /\.(\w+)$/igo;
my ($other_extension) = extension_for(attribute($filename));
$other_extension =~ s/^\.//o;

my ($start, $end) = split /,/o, $comments_for_extension{lc($other_extension || $extension)};

join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs retrieve($filename)),
         "\n$start $generated_string $end\n";
__060cfa349e629eb90a82b87a8ba00c1d
meta::function('sdocp', <<'__8b7ed5bbd537234ae53c0691b6d02c97');
# Renders an attribute as SDocP. This logic was taken directly from the sdoc script.
my $attribute = retrieve($_[0]);
sub escape {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}
"sdocp('" . escape($_[0]) . "', '" . escape($attribute) . "');";
__8b7ed5bbd537234ae53c0691b6d02c97
meta::function('serialize', <<'__5148e8ca46eeb3e297f76d098e496bcf');
my ($options, @criteria) = separate_options(@_);
my $partial     = $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [retrieve('bootstrap::initialization'), @attributes, 'internal::main();', '', '__END__']};
join "\n", @final_array;
__5148e8ca46eeb3e297f76d098e496bcf
meta::function('serialize_single', <<'__ef0f63556d22816ed102d3bbe2172b28');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
return "$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";
__ef0f63556d22816ed102d3bbe2172b28
meta::function('sh', 'system(@_);');
meta::function('shell', 'shell::repl();');
meta::function('size', 'length(serialize());');
meta::function('snapshot', <<'__d3d84a364524eeb8ee90623f545187e8');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
hook('snapshot', $finalname);
__d3d84a364524eeb8ee90623f545187e8
meta::function('state', <<'__119111f84c3e32a5536838ac84bc6f10');
my @keys = sort keys %data;
my $hash = fast_hash(fast_hash(scalar @keys) . join '|', @keys);
$hash = fast_hash("$data{$_}|$hash") for @keys;
$hash;
__119111f84c3e32a5536838ac84bc6f10
meta::function('test', <<'__bcb0a6fec8519794c07d43fb6081d05c');
# Runs a single test case.
render();
node(['cached_dependency::caterwaul.all.js', 'js::montenegro.server', "test/$_[0].js"]);
__bcb0a6fec8519794c07d43fb6081d05c
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'hook(\'unlock\', chmod_self(sub {$_[0] | 0200}));');
meta::function('update', '&{\'update-from\'}(@_, grep s/^parent:://o, sort keys %data);');
meta::function('update-from', <<'__4872d8da1fee53aace2c4f422841c0ba');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

around_hook('before-update-from-invocation', separate_options(@_), sub {
  my ($options, @targets) = @_;

  @targets or return;
  my $save_state = ! ($$options{'-n'} || $$options{'--no-save'});
  my $no_parents =    $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
  my $force      =    $$options{'-f'} || $$options{'--force'};

  &{'save-state'}('before-update') if $save_state;

  for my $target (@targets) {
    around_hook('update-from', $target, sub {
    dangerous("updating from $target", sub {
      my $attributes = join '', qx($target ls -aiu);
      die "skipping unreachable $target" unless $attributes;

      rm(split /\n/, retrieve("parent::$target")) if $data{"parent::$target"};
      associate("parent::$target", $attributes) unless $no_parents;

      dangerous('', sub {eval qx($target serialize -ipmu)});
      dangerous('', sub {eval qx($target serialize -ipMu)});
      reload()})})}

  if (verify()) {hook('update-from-succeeded', $options, @targets);
                 terminal::info("Successfully updated. Run 'load-state before-update' to undo this change.") if $save_state}
  elsif ($force) {hook('update-from-failed', $options, @targets);
                  terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                    'Run "load-state before-update" to undo the update and return to a working state.') if $save_state}
  else {hook('update-from-failed', $options, @targets);
        terminal::error('Verification failed after the upgrade was complete.');
        terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.") if $save_state;
        return &{'load-state'}('before-update') if $save_state}});
__4872d8da1fee53aace2c4f422841c0ba
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__d31b85fffd464ddf516d2afeb63dcbde');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
hook('after-verify', $result, observed => $observed, expected => $state);
$result;
__d31b85fffd464ddf516d2afeb63dcbde
meta::hook('after-render::cleanup', 'unlink qw/minify.js minify.js.sdocp/;');
meta::hook('after-render::minify', 'minify($_) for qw/montenegro.client.js montenegro.server.js/;');
meta::internal_function('around_hook', <<'__e1cd17b80d4e8165df9c94facd9f239b');
# around_hook('hookname', @args, sub {
#   stuff;
# });

# Invokes 'before-hookname' on @args before the sub runs, invokes the
# sub on @args, then invokes 'after-hookname' on @args afterwards.
# The after-hook is not invoked if the sub calls 'die' or otherwise
# unwinds the stack.

my $hook = shift @_;
my $f    = pop @_;

hook("before-$hook", @_);
my $result = &$f(@_);
hook("after-$hook", @_);
$result;
__e1cd17b80d4e8165df9c94facd9f239b
meta::internal_function('associate', <<'__fc4f785bcf3ffe3225a73a1fdd314703');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{'execute'};
$value;
__fc4f785bcf3ffe3225a73a1fdd314703
meta::internal_function('attribute', <<'__62efb9f22157835940af1d5feae98d98');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__62efb9f22157835940af1d5feae98d98
meta::internal_function('chmod_self', <<'__b13487447c65f2dc790bd6b21dde89dd');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__b13487447c65f2dc790bd6b21dde89dd
meta::internal_function('dangerous', <<'__4b8343178d6d4d1b760d61b1cfda008c');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my @result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
wantarray ? @result : $result[0];
__4b8343178d6d4d1b760d61b1cfda008c
meta::internal_function('debug_trace', <<'__77644ab45a770a6e172680f659911507');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__77644ab45a770a6e172680f659911507
meta::internal_function('dep', <<'__bad9b934374b176318ed2295b63130bc');
# A variadic function to prepend cached_dependency:: onto things.
# Used like this: dep(qw/caterwaul.all.js montenegro.server.js/)
map "cached_dependency::$_", @_;
__bad9b934374b176318ed2295b63130bc
meta::internal_function('execute', <<'__4b4efc33bc6767a7aade7f427eedf83f');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{"meta::$namespace"}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};
__4b4efc33bc6767a7aade7f427eedf83f
meta::internal_function('exported', <<'__27414e8f2ceeaef3555b9726e690eb0f');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;
__27414e8f2ceeaef3555b9726e690eb0f
meta::internal_function('extension_for', <<'__65e48f50f20bc04aa561720b03bf494c');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__65e48f50f20bc04aa561720b03bf494c
meta::internal_function('fast_hash', <<'__ac70f469e697725cfb87629833434ab1');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__ac70f469e697725cfb87629833434ab1
meta::internal_function('file::read', <<'__186bbcef8f6f0dd8b72ba0fdeb1de040');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__186bbcef8f6f0dd8b72ba0fdeb1de040
meta::internal_function('file::write', <<'__eb7b1efebe0db73378b0cce46681788d');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

open my($handle), $options{append} ? '>>' : '>', $name or die "Can't open $name for writing";
print $handle $contents;
close $handle;
__eb7b1efebe0db73378b0cce46681788d
meta::internal_function('fnv_hash', <<'__8d001a3a7988631bab21a41cee559758');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__8d001a3a7988631bab21a41cee559758
meta::internal_function('hypothetically', <<'__33ee2e1595d3877bd1d9accaa72305c8');
# Applies a temporary state and returns a serialized representation.
# The original state is restored after this, regardless of whether the
# temporary state was successful.

my %data_backup   = %data;
my ($side_effect) = @_;
my $return_value  = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
$return_value;
__33ee2e1595d3877bd1d9accaa72305c8
meta::internal_function('internal::main', <<'__435a9e83ac803960745d9aa5aac6c75f');
disable();

$SIG{'INT'} = sub {snapshot(); exit 1};

$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action || 'usage';
terminal::warning("unknown action: '$function_name'") and $function_name = 'usage' unless $externalized_functions{$function_name};

around_hook('main-function', $function_name, @ARGV, sub {
  dangerous('', sub {
    chomp(my $result = &$function_name(@ARGV));
    print "$result\n" if $result})});

save() unless state() eq $transient{initial};

END {
  enable();
}
__435a9e83ac803960745d9aa5aac6c75f
meta::internal_function('invoke_editor_on', <<'__1448132d5294a4b8390b4a684d8a78f9');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__1448132d5294a4b8390b4a684d8a78f9
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('namespace', <<'__93213d60cafb9627e0736b48cd1f0760');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__93213d60cafb9627e0736b48cd1f0760
meta::internal_function('retrieve', <<'__0b6f4342009684fdfa259f45ac75ae37');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];
__0b6f4342009684fdfa259f45ac75ae37
meta::internal_function('retrieve_with_hooks', <<'__5186a0343624789d08d1cc2084550f3d');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__5186a0343624789d08d1cc2084550f3d
meta::internal_function('select_keys', <<'__8ee1d5fa37927c66d9eec4d0d8269493');
my %options   = @_;
my %inherited = map {$_ => 1} split /\n/o, join "\n", retrieve(grep /^parent::/o, sort keys %data) if $options{'-u'} or $options{'-U'};
my $criteria  = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

grep /$criteria/ && (! $options{'-u'} || ! $inherited{$_}) && (! $options{'-U'} || $inherited{$_}) &&
                    (! $options{'-I'} || ! $transient{inherit}{namespace($_)}) && (! $options{'-i'} || $transient{inherit}{namespace($_)}) &&
                    (! $options{'-S'} || ! /^state::/o) && (! $options{'-M'} || ! /^meta::/o) && (! $options{'-m'} || /^meta::/o), sort keys %data;
__8ee1d5fa37927c66d9eec4d0d8269493
meta::internal_function('separate_options', <<'__d47e8ee23fe55e27bb523c9fcb2f5ca1');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
  $options{$1} = $2 for grep /^([^=]+)=(.*)$/, @longs;
++$options{$_}      for grep ! /=/, @singles, @longs;

({%options}, @others, @_);
__d47e8ee23fe55e27bb523c9fcb2f5ca1
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__8a6897e093f36bf05477a3889b84a61d');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__8a6897e093f36bf05477a3889b84a61d
meta::internal_function('temporary_name', <<'__0fb1402061581b69822f913631b4a9d9');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__0fb1402061581b69822f913631b4a9d9
meta::internal_function('translate_backtrace', <<'__06fad3d85833a6484e426401b95e0206');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__06fad3d85833a6484e426401b95e0206
meta::internal_function('with_exported', <<'__fc4f32c46d95c6deed0414364d1c7410');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__fc4f32c46d95c6deed0414364d1c7410
meta::library('shell', <<'__7df727b3be0d8579da3fee5144041f75');
# Functions for shell parsing and execution.
package shell;
use Term::ReadLine;

sub tokenize {grep length, split /\s+|("[^"\\]*(?:\\.)?")/o, join ' ', @_};

sub parse {
  my ($fn, @args) = @_;
  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  {function => $fn, args => [@args]}}

sub execute {
  my %command = %{$_[0]};
  die "undefined command: $command{function}" unless exists $externalized_functions{$command{function}};
  &{"::$command{function}"}(@{$command{args}})}

sub run {execute(parse(tokenize(@_)))}

sub prompt {
  my %options = @_;
  my $name    = $options{name}  // ::name();
  my $state   = $options{state} // ::state();
  my $other   = $state ne $transient{initial} ? 33 : 30;
  my $locked  = ::is_locked() ? "\033[1;31mlocked\033[0;0m" : '';

  "\033[1;32m$name\033[1;${other}m" . substr($state, 0, 4) . "\033[0;0m$locked\033[1;34m$options{stuff}\033[0;0m "}

sub repl {
  my %options = @_;

  my $term = new Term::ReadLine "$0 shell";
  $term->ornaments(0);
  my $attribs = $term->Attribs;
  $attribs->{completion_entry_function} = $attribs->{list_completion_function};

  my $autocomplete = $options{autocomplete} || sub {[sort keys %data, sort keys %externalized_functions]};
  my $prompt       = $options{prompt}       || \&prompt;
  my $parse        = $options{parse}        || sub {parse(tokenize(@_))};
  my $command      = $options{command}      || sub {my ($command) = @_; ::around_hook('shell-command', $command, sub {print ::dangerous('', sub {execute($command)}), "\n"})};

  &$command(&$parse($_)) while ($attribs->{completion_word} = &$autocomplete(), defined($_ = $term->readline(&$prompt())))}
__7df727b3be0d8579da3fee5144041f75
meta::library('terminal', <<'__c52308d05ebb4ff61c5fc36e6d9c7a8a');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp($_), print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for map join('', $_), @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__c52308d05ebb4ff61c5fc36e6d9c7a8a
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::message_color('test', 'purple');
meta::parent('/home/spencertipping/bin/configuration', <<'__511208c99d8bc2caa3067db9f1824163');
meta::type::configuration
parent::/home/spencertipping/bin/object
__511208c99d8bc2caa3067db9f1824163
meta::parent('/home/spencertipping/bin/node-base', <<'__cb3ede4ac84dd70a220e31df5e90c4d6');
function::loc
function::node
function::node-custom
function::render
function::run-forever
internal_function::dep
message_color::test
meta::type::js
parent::/home/spencertipping/bin/repository
parent::/home/spencertipping/conjectures/perl-objects/sdoc
__cb3ede4ac84dd70a220e31df5e90c4d6
meta::parent('/home/spencertipping/bin/object', <<'__febaa835f7b66f7fdcb99de9560857bd');
bootstrap::initialization
bootstrap::perldoc
function::alias
function::cat
function::cc
function::child
function::clone
function::cp
function::create
function::current-state
function::disable
function::edit
function::enable
function::export
function::extern
function::grep
function::hash
function::hook
function::hooks
function::identity
function::import
function::initial-state
function::is
function::load-state
function::lock
function::ls
function::mv
function::name
function::parents
function::perl
function::reload
function::rm
function::save
function::save-state
function::serialize
function::serialize_single
function::sh
function::shell
function::size
function::snapshot
function::state
function::touch
function::unlock
function::update
function::update-from
function::usage
function::verify
internal_function::around_hook
internal_function::associate
internal_function::attribute
internal_function::chmod_self
internal_function::dangerous
internal_function::debug_trace
internal_function::execute
internal_function::exported
internal_function::extension_for
internal_function::fast_hash
internal_function::file::read
internal_function::file::write
internal_function::fnv_hash
internal_function::hypothetically
internal_function::internal::main
internal_function::invoke_editor_on
internal_function::is_locked
internal_function::namespace
internal_function::retrieve
internal_function::retrieve_with_hooks
internal_function::select_keys
internal_function::separate_options
internal_function::strip
internal_function::table_display
internal_function::temporary_name
internal_function::translate_backtrace
internal_function::with_exported
library::shell
library::terminal
message_color::state
message_color::states
meta::configure
meta::externalize
meta::functor::editable
meta::type::alias
meta::type::bootstrap
meta::type::data
meta::type::function
meta::type::hook
meta::type::inc
meta::type::internal_function
meta::type::library
meta::type::message_color
meta::type::meta
meta::type::parent
meta::type::retriever
meta::type::state
retriever::file
retriever::id
__febaa835f7b66f7fdcb99de9560857bd
meta::parent('/home/spencertipping/bin/repository', <<'__f88c2b0e5725507b3fdb5719fd65e6d3');
function::dupdate
meta::type::cached_dependency
parent::/home/spencertipping/bin/configuration
__f88c2b0e5725507b3fdb5719fd65e6d3
meta::parent('/home/spencertipping/conjectures/perl-objects/sdoc', <<'__6b80e7e220f0ce19851eaf5bb9cf2fc7');
function::sdoc
function::sdocp
meta::type::sdoc
parent::/home/spencertipping/bin/object
retriever::sdoc
retriever::sdocp
__6b80e7e220f0ce19851eaf5bb9cf2fc7
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('sdoc', 'exists $data{"sdoc::$_[0]"} ? sdoc("sdoc::$_[0]") : undef;');
meta::retriever('sdocp', <<'__fef74cd94fa8761618662802f0bfc171');
my $attribute = attribute($_[0]);
exists $data{"sdoc::$attribute"} ? sdocp("sdoc::$attribute") : undef;
__fef74cd94fa8761618662802f0bfc171
meta::sdoc('js::minify', <<'__c427ba38be3090426d6ef69c5cabf6b3');
Minifies a JavaScript file by using the Caterwaul parse/deparse mechanism.
This won't do identifier packing (which is unsafe in Caterwaul), but it will provide decent minification by removing comments and most whitespace.

var code = require('fs').readFileSync(process.argv[2], 'utf8');
require('fs').writeFileSync(process.argv[2].replace(/\.js$/, '.min.js'), caterwaul.parse(code).serialize(), 'utf8');
__c427ba38be3090426d6ef69c5cabf6b3
meta::sdoc('js::montenegro.client', <<'__ba020c1380510106b099bbf35892472b');
Montenegro client-side bindings | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Montenegro works with jQuery to add structure to user interfaces and define useful shorthands for common cases. It also provides a Javascript markup language that you can use to build
interfaces instead of going the HTML route. For logic-heavy applications this may make more sense than separating the layout.

JQuery extension methods.
These are used throughout Montenegro. up() takes either a selector or a number. If you give it a selector, it grabs the nearest matching parent; if you give it a number, it traverses up that
many parents. The nearest() method lets you do approximate matching. For example, suppose you have this setup:

| div.foo(div > textarea, div > button.save)

If you want the save button to see the textarea (e.g. from inside a click handler), the obvious solution is $(this).parent().find('textarea'). However, that's a lot of work and doesn't scale
well if the DOM layout changes. Better is to say $(this).nearest('textarea'). Note that it doesn't actually return just the single nearest one. It just goes up until it starts finding
textareas. Note that .nearest() is O(n^2) and average-case n log n in the number of nodes in the document.

The cval() method returns and then clears the value of a component. If you give it a parameter, the value will be cleared to that value rather than set to the empty string.

  caterwaul.tconfiguration('std', 'montenegro.methods', function () {jQuery.fn /se[_.up(s)      = s instanceof Number ? s ? this.parent().up(s - 1) : this : this.parents(s).eq(0),
                                                                                   _.cval(nv)   = l[v = this.val()] in this.val(nv || '') /re[v],
                                                                                   _.nearest(s) = this.length ? this.find(s) /re[_.length ? _ : this.parent().nearest(s)] : jQuery([])]}).

  Event extensions.
  Some events are common enough that it's useful to have a handler for them. Hitting the enter key is one of those. Another is getting a link to have a click action and look active, but not
  actually go anywhere.

    tconfiguration('std', 'montenegro.events', function () {jQuery.fn /se[_.enter_key(f)  = this.keyup(fn[e][f.call(this, e), when[e.which === 13]]),
                                                                          _.escape_key(f) = this.keyup(fn[e][f.call(this, e), when[e.which === 27]]),
                                                                          _.clickable(f)  = this.attr('href', 'javascript:void(0)').click(f)]}).

  Fixes.
  These are fixes for places where jQuery is somehow suboptimal. Examples include extensions to support variadic/pluralized append(), prepend(), before(), and after(), and various fixes for
  the clone() method. These fixes are still maintained in other Github repositories:

  | http://github.com/spencertipping/jquery.fix.append-multiple
    http://github.com/spencertipping/jquery.fix.select-clone
    http://github.com/spencertipping/jquery.fix.textarea-clone

    tconfiguration('std seq continuation', 'montenegro.fixes', function () {
      $.from_many() = l[as = arguments] in $([]) /se.r[seq[~as *![_ instanceof Array || _ instanceof jQuery ? seq[~_ *![r.push(_)]] : r.push(_)]]],

      $.fn.clone() = original_clone.call(this) /se[clone_values_of_components(this, _)],

      $.fn.after   = make_variadic_and_plural($.fn.after),
      $.fn.before  = make_variadic_and_plural($.fn.before),
      $.fn.append  = make_variadic_and_plural($.fn.append),
      $.fn.prepend = make_variadic_and_plural($.fn.prepend),

      where*[$                                               = jQuery,
             original_clone                                  = $.clone,
             make_variadic_and_plural(f)()                   = l[xs = arguments] in
                                                               this /se.t[seq[~xs *![_ instanceof Array ? make_variadic_and_plural(f).apply(t, _.slice()) : f.call(t, _), unless[_ == null]]]],

             clone_values_of_components(source, destination) = l*[needs_filling = 'select, textarea',
                                                                  paired        = seq[~source.find(needs_filling) *+$ ^ destination.find(needs_filling) *+$]] in
                                                               seq[paired *![_[1].val(_[0].val())]]]}).

RPC tunneling.
You can connect to a server endpoint with a CPS-converted proxy function. You can also send opaque references to the server (presumably so that it can send them back). Here's an example of
passing a DOM node:

| var identity = montenegro.rpc('/identity-function');
  var body     = $('body');
  identity(montenegro.rpc.ref(body), fn[result][montenegro.rpc.ref(result).append('Got the body element back')]);
  // alternatively:
  l/cps[result <- identity(montenegro.rpc.ref(dom_node), _)][montenegro.rpc.ref(result).append('Got the body element back')];

Assuming that the server replies with the data it was given, this will append some text to the document body when the server replies. The mechanism for this is actually really simple;
montenegro.rpc.ref() just assigns a new gensym to each value you alias; that string goes to the server and is later resolved back into the client-side value. (This is why the server won't be
able to do anything useful with the value.) Montenegro automatically garbage-collects the reference table by deallocating a reference when you dereference it. (So you can't dereference
something more than once; if you do this it will create a new reference instead.)

  Example: Building a chat client.
  In montenegro.server.js.sdoc there's an example of a broadcast chat server. Here's the corresponding client code and some DOM nodes to make it work:

  | var send = caterwaul.montenegro.rpc('/chat/send');
    caterwaul.montenegro.rpc('/chat')(fn[message][$('.log').append(html[div.message(message)]), this()]);
    $('body').append(html[div(div.log, button('Send'), input]));         // This just builds the UI. You could also do this with regular HTML.
    l/cps[_ <- $('button').click(_)][send($('#input').cval())];

  The 'this()' invocation inside the callback is used when you want to send something back and reuse the callback function. I'm using it here to avoid having to refer to the callback function
  in a first-class way (which would normally be necessary to set the cycle up again).

    tconfiguration('std seq', 'montenegro.rpc', function () {
      this.namespace('montenegro') /se[
        _.rpc(url)() = l[as = seq[~arguments]][l*[callback = as.length && as[as.length - 1] /re[_.constructor === Function && as.pop()]] in
                                               $.ajax({url: url, type: 'POST', contentType: 'application/json', data: JSON.stringify(as.slice()), dataType: 'json',
                                                   success: fn[reply][callback && callback.apply(fn_[_.rpc(url).apply(null, seq[~arguments].slice().concat([callback]))], reply)]})]]}).

DOM construction.
You can build elements using a CSS-selector-style syntax. (Alternatively, you can provide an element in the markup; if you do it this way, the template element's ID should match the model
name.) So, for example, suppose we're modeling a person with a name and e-mail address. Here's what the markup might look like in HTML:

| <div id='person' class='person'>
    <label for='name1'>Name:</label>
    <input id='name1' class='name nonempty' />
    <label for='email1'>Email:</label>
    <input id='email1' class='email' />
    <a class='facebook' href='http://facebook.com/someone'>A Facebook Page</a>
  </div>

| html[div.person(input.name.nonempty, input.email, a.facebook /attr('href', 'http://facebook.com/someone') > 'A Facebook Page')]

Note that you can't use hyphens in the class names in Javascript, but if you type underscores they'll be converted into dashes. For example:

| html[div.first_name]          // becomes <div class='first-name'></div>

  Automation and event handlers.
  You can get the jQuery shell for an element by using the '/' operator. The right-hand side is an invocation on the jQuery shell; for example:

  | $('<a>').addClass('foo').click(fn_[...]).mouseover(fn_[...])
    // can be written as:
    html[a.foo /click(fn_[...]).mouseover(fn_[...])]

  Anything after a '/' for an element is not considered to be HTML, so you'll have to use another html[] if you want to create elements to pass into a jQuery function. For example:

  | html[a.foo /append(span('some text'))]              // won't do what you want
    html[a.foo /append(html[span('some text')])]        // this is the right way to do it
    html[a.foo > span('some text')]                     // even better

  Evaluating subexpressions.
  Going back to the person example, suppose you have a list of people that you want to insert into a div. Here's what that looks like:

  | var people = seq[...];
    var person = fn[p][html[div.person(input.name.nonempty /val(p.name))]];
    var ui     = html[div.people(people.map(person), button.save('Save'), button.cancel('Cancel'))];

  Here, the expression 'people.map(person)' gets evaluated as a Javascript expression rather than as markup. Montenegro knows to do this because 'people' isn't one of the HTML elements it
  knows about. Javascript expressions should return strings, sequences, arrays, or jQuery objects. Strings get promoted into text nodes, so you don't have to worry about HTML escaping.

  Mapping.
  You can map an element through a function using the '%' shorthand. For example:

  | var nonempty = fn_[this.instavalidate(/^.+$/)];
    var ui = html[div(input.name %nonempty, input.title %nonempty)]

  This isn't quite the same thing as side-effecting. Using the map shorthand replaces the element with whatever your map function returns, which may or may not be desirable.

  Note that tempting as it is, you can't say this:

  | html[div((input.name, input.title) %nonempty)]       // can't do this, even though it would be awesome

  I considered adding a distributive property, but Javascript's syntax is restrictive enough that I don't think it makes sense. It also makes you think too hard about your markup, which isn't
  a good thing. The markup should be simple and local, and your modifier functions should be short enough to type several times. (This can be achieved by using a let-binding or similar.)

  Evaluation contexts.
  Containment can be specified either as div(x) or by div > x. If you want 'x' to be evaluated as Javascript code rather than HTML, you can use >=, for instance div >= x. (Think of <% vs. <%=
  in ERB or ASP.) Specifying multiple children is possible too; you use div >= [x, y, z]. (Using div >= (x, y, z) will evaluate (x, y, z) as JS, which returns just z.)

  Note that because > and >= are left-associative, a > b > c will add b and c to a rather than adding c to b, then b to a.

  Attributes.
  You can define attributes by using one form of the * syntax:

  | html[a.foo *href('http://www.google.com')]

  As usual, underscores are replaced by hyphens -- most HTML attributes don't contain underscores.

  Context inference.
  There's a little bit of guessing that goes on about what's what. Usually the guesser gets things right, but there are some older HTML nodes that it doesn't detect. For example:

  | html[div.foo > people.map(person)]          // div.foo is an element, people.map(person) is a function call -- its return value will be appended to the div
    html[a.code > b.code > 'foo']               // a.code is a link with class 'code' that contains the Javascript value 'b.code' and the text 'foo'
    html[div, foo, bar(bif), code('bar')]       // a div, the value 'foo', the function 'bar' called on bif, and a <code> element containing the text 'bar'

  The complete list is in caterwaul.montenegro.dom.elements; setting additional keys in this hash to truthy values causes those identifiers to be treated as valid HTML elements. (I mention
  this because at the moment the HTML5 standard isn't completely listed.)

    Caveats.
    Sometimes context inference doesn't quite work right. One particular case is when you embed the seq[] macro inside html[] -- in this case, the html[] macro happily dives through the seq[]
    shell and into the expressions, interpreting things like seq[xs *[_ + 1]] as HTML invocations with attributes called []. (Obviously not the right thing to do.)

    To prevent this from happening, use forcing contexts such as >= and []. For example:

    | html[table(seq[~rows *[tr(td(_.name), td(_.value))]])]                    // This fails at compile-time
      html[table[seq[~rows *[html[tr(td(_.name, td(_.value))]]]]]               // Forced context; this one works

  Subtleties of this macroexpander.
  There's only one thing that's particularly subtle and crucial to how this works. That's the detail of the qs[_] matcher, which is the first macro defined for the DOM expander. This macro
  isn't written as a conditional because we never want the macroexpansion to descend as it normally would. Rather, we drive the descent using explicit calls to macroexpand(). Therefore, qs[_]
  must always claim to have replaced the syntax with something; thus the failure case is just identity, indicating a success and no macro-driven descent.

    tconfiguration('std seq continuation', 'montenegro.dom', function () {
      this.configure('montenegro.fixes montenegro.methods').namespace('montenegro').dom = this.global().clone() /se[
        this.rmacro(qs[html[_]], _) /cps.t[qs[jQuery.from_many(_x)].replace({_x: _.macroexpand(t)})],

        _.elements = this.util.qw('html head body meta script style link title div a span input button textarea option select form label iframe blockquote code caption ' +
                                  'table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup var canvas audio video') /re[seq[!(~_ *[[_, _]])]],

        l*[ref(x) = new this.ref(x), expand = _.macroexpand, is_an_element(tree) = _.elements[tree.data] || tree[0] && is_an_element(tree[0]), htmlify(s) = s.replace(/_/g, '-')] in

        _.macro /se[_(qs[_], fn[x][e ? qs[jQuery(document.createElement(_tag))].replace({_tag: '"#{e}"'}) : x, where[e = is_an_element(x)]]),

                    _(qs[_(_)], appender(expand, expand)), _(qs[_[_]], appender(expand, id)), _(qs[_ > _], appender(expand, expand)), _(qs[_ >= _], appender(expand, id)),
                    where[id(x) = x, appender(f, g)(t1, t2) = is_an_element(t1) && qs[_e.append(_c)].replace({_e: f(t1), _c: g(t2)})],

                    _(qs[[_]],  fn     [t][qs[[_e]]  .replace({_e: expand(t)})]),          _(qs[_, _], fn[t1, t2][qs[_1, _2].replace({_1: expand(t1), _2: expand(t2)})]),
                    _(qs[_ %_], fn[t1, t2][qs[_f(_e)].replace({_e: expand(t1), _f: t2})]), _(qs[_ /_], fn[t1, t2][qs[_e._f] .replace({_e: expand(t1), _f: t2})]),

                    _(qs[_ *_(_)], fn[e, a, v][qs[_e.attr(_a, _v)].replace({_e: expand(e),  _a: '"#{htmlify(a.data)}"', _v: v}), when[is_an_element(e)]]),
                    _(qs[_._],     fn [t1, t2][qs[_e.addClass(_c)].replace({_e: expand(t1), _c: '"#{htmlify(t2.data)}"'}),       when[is_an_element(t1)]])]]}).

Final configuration.
This one loads all of the others (though it lets you specify whether you want indirected references or not).

  configuration('montenegro', function () {this.configure('montenegro.methods montenegro.events montenegro.fixes montenegro.rpc montenegro.dom')});
__ba020c1380510106b099bbf35892472b
meta::sdoc('js::montenegro.server', <<'__f8970a1ab871b1cd511f77494c1d916d');
Montenegro server library | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Montenegro extends Caterwaul (http://spencertipping.com/caterwaul) to operate in a node.js environment and provide an RPC endpoint.

  caterwaul.

Node.js variables and Montenegro reference.
Caterwaul has a problem with node.js variables. Specifically, code that it compiles can't reach the 'require' variable, which ends up being really important. To fix this, Montenegro binds that
variable within any compiled function by using a macro.

   configuration('montenegro.core', function () {this.shallow('montenegro', {require: require})}).

URL router.
Montenegro gives you a quick proxy function to route requests based on URL patterns. This makes a suitable server if you want to promote it into one (and in fact it is the function you get
back when you create a new server). Configuration is done like this:

| var router = caterwaul.montenegro.route.url();
  router.on('/foo', 'GET', fn[request, response][response /se[_.writeHead(200), _.end('bar')]]);
  router.not_found(request, response) = response /se[_.writeHead(404), _.end('Bummer dude, not found')];
  router.on('/services', 'GET', router.service_listing);        // Show a list of registered URLs

Because routers provide the same interface they accept, you can nest them and create proxies. The last matching pattern is the one that handles the URL, so you can always refine URL matches
(or override them) by adding new on() handlers.

Each service built with this interface exposes a list of methods. You can enable it by using the server.service_listing method as the target of an 'on' invocation. You may not want to do this,
but if exposing the request handlers is a security flaw then there is probably a larger problem with the design of the application.

  tconfiguration('std seq', 'montenegro.route.url', function () {
    this.configure('montenegro.core').montenegro /se[(_.route = _.route || {}) /se[
      _.url() = l*[result(request, response) = result.route(request, response)] in
                result /se[_.handlers                     = seq[~[]],
                           _.on(pattern, method, handler) = this /se[_.handlers.push({url: pattern, method: method, handler: handler})],
                           _.route(request, response)     = this /se[(_.handler_for(request.url, request.method) || _.not_found).call(_, request, response)],

                           _.not_found(request, response) = response /se[_.writeHead(404), _.end('#{request.url} was not found.')],

                           _.service_listing(req, res)    = res /se.r[r.writeHead(200), r.end(seq[_.handlers *['#{_.url} (#{_.method})']].join('\n'))],

                           _.handlers_for(url, method)    = seq[this.handlers %[(_.url.test ? _.url.test(url) : _.url === url) && (! _.method || _.method === method)] *[_.handler]],
                           _.handler_for(url, method)     = this.handlers_for(url, method).pop()]]]}).

Server construction.
You construct a Montenegro server instance by calling montenegro.server(port). The server starts running immediately. Each server has an internal routing table that maps URL patterns to
request handlers. (A request handler is just a function that Node's createServer would accept.)

  tconfiguration('std seq', 'montenegro.server', function () {
    l[require = this.configure('montenegro.core').montenegro.require] in this.configure('montenegro.route.url').montenegro /se[
      _.server(port)      = caterwaul.util.merge(_.route.url(), _.server.extensions) /se[require('http').createServer(_).listen(port || 8080, '0.0.0.0')],
      _.server.extensions = {}]}).

Trivial HTML construction.
This gives you a quick way to throw a page together. The key here is that you quote a syntax tree that will end up being executed on the client-side when jQuery loads. For example, to say
hello world:

| response /se[_.writeHead(200, {'content-type': 'text/html'}),
               _.end(montenegro.html(qs[$('body').append(html[h1('Hello world!')])]))];

This builds a client page that loads caterwaul.all.js, montenegro.client.js, and jQuery. By default, caterwaul.all.js and montenegro.client.js come from my webserver (which sometimes is down),
but you can change where it requests these scripts by setting _.html.caterwaul_path, _.html.montenegro_path, and _.html.jquery_path.

  tconfiguration('std', 'montenegro.html', function () {
    this.configure('montenegro.core').montenegro /se[
      _.html(t) = l*[html_header()       = l[s(src) = '<script src="#{src}"></script>'] in
                                           '<!doctype html><html><head>#{s(_.html.jquery_path)}#{s(_.html.caterwaul_path)}#{s(_.html.montenegro_path)}',
                     wrap_initializer(s) = '<script>$(caterwaul.clone("std opt continuation seq parser montenegro")(#{s}))</script>',
                     html_footer()       = '</head><body></body></html>'] in
                  html_header() + wrap_initializer(qs[function () {return _t}].replace({_t: t}).serialize()) + html_footer(),

      _.html /se[_.caterwaul_path  = 'http://spencertipping.com/caterwaul/caterwaul.all.js',
                 _.montenegro_path = 'http://spencertipping.com/montenegro/montenegro.client.js',
                 _.jquery_path     = 'http://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js']]}).

RPC endpoints.
You can create an RPC service on a URL. The RPC endpoint wraps the function in a CPS-converted HTTP request/response proxy that listens for POST requests on a given URL, expects a JSON array
in the body, and converts the body into a list of parameters for the function you specify. Your function can access the reply continuation by either returning normally or invoking 'this' on
the reply object.

All listeners are CPS-converted, so you can have coroutine-based communication between the client and server. For example, this is a broadcast chat server (which relies on singly re-entrant
continuations for replies, if you want to think about it as a regular procedure call):

| var clients = seq[~[]];
  caterwaul.montenegro.server(8080) /se[_.rpc('/chat',      fn_[clients.push(this)]).
                                          rpc('/chat/send', fn[message][seq[clients *![_(message)]], clients = seq[~[]], this('OK')])];

The client code for this example is in montenegro.client.js.sdoc.

RPC services can provide documentation. This is an optional second parameter, e.g:

| chat_service.rpc('/chat', 'Clients should long-loop this URL to be notified of messages that are sent.', fn_[...]);

Any clients who GET the URL will be served the documentation string as plain text. If you don't specify any documentation, GET requests will be sent a generic 'there's a service here, but no
documentation for it' message as plain text. The service will also send potentially useful diagnostic messages with 400 error codes if you're using it incorrectly.

  tconfiguration('std continuation', 'montenegro.server.rpc', function () {
    l*[html = this.configure('montenegro.html').montenegro.html] in

    this.configure('montenegro.server').montenegro.server.extensions /se[
      _.rpc(url, _documentation, _fn) =
        this /se.t[install_json_post_handler(t),
                   install_documentation_handler(t),
                   install_test_page(t),

                   where*[documentation = _fn ? _documentation : '#{url} service (no documentation provided)',
                          fn            = _fn || _documentation,

                          rpc           = _.rpc,

                          install_json_post_handler(server)     = server.on(url,          'POST', fn[req, res][json_from(req)(fn[json][fn.apply(json_to(res), json)])]),
                          install_documentation_handler(server) = server.on('#{url}/doc', 'GET',  fn[req, res][res /se[_.writeHead(200, {'content-type': 'text/plain'}), _.end(doc)]]),
                          install_test_page(server)             = server.on(url,          'GET',  fn[req, res][res /se[_.writeHead(200, {'content-type': 'text/html'}),  _.end(rpc.testpage())]]),

                          json_from(request)(cc) = l[pieces = []] in request /se[_.on('data', pieces/mb/push),
                                                                                 _.on('end', fn_[unwind_protect[rpc.error(e)][cc(JSON.parse(pieces.join('')))]])],

                          error_to (response)(e) = response /se[_.writeHead(400, {'content-type': 'text/plain'}), _.end(e.toString())],
                          json_to  (response)()  = l[as = Array.prototype.slice.call(arguments)] in
                                                   response /se[_.writeHead(200, {'content-type': 'application/json'}), _.end(JSON.stringify(as))]]],

  Error trapping.
  If an error occurs, the client receives the toString() produced by the error object and a stack trace is logged to the console. However, you may want to do something different. If you do,
  change montenegro.server.rpc.error(e).

      _.rpc.error(e) = e /se[console.log(_)],

  Test pages.
  If you use the server as shown above, you'll get a test page for each RPC endpoint. For example, the test page for the '/chat' URL is '/chat'. You can navigate to this page and send requests
  to the RPC to verify that it's working correctly. This is enabled in production-mode as well as development mode; it's my attempt to encode Kerckhoffs' principle
  (http://en.wikipedia.org/wiki/Kerckhoffs'_principle) into the framework to prevent bad security decisions.

      _.rpc.testpage() = html(qs[$('head').append(html[link *rel('stylesheet') *href('http://fonts.googleapis.com/css?family=Droid+Sans+Mono&subset=latin'),
                                                       link *rel('stylesheet') *href('http://spencertipping.com/montenegro/style/testpage.css')]),

                                 $('body').append(html[div(div.header(h1('RPC shell'), h2.documentation(span.loading('loading documentation...'))),
                                                           p('You can evaluate code below. ', code('rpc()'), ' is the RPC connector function for the API, and ', code('log()'),
                                                             ' can be used to log values. Your code will be macroexpanded under std, seq, opt, parser, montenegro, and continuation.'),
                                                           div(button.run('Run')),
                                                           textarea.code /val('l/cps[x <- rpc("Hello world", _)][log(x)]'),
                                                           div.log)]),

                                 window.rpc = caterwaul.montenegro.rpc(url),
                                 $('.run').click(fn_[unwind_protect[error(e)][caterwaul.clone('std seq continuation opt montenegro')('(function () {#{$("textarea.code").val()}})')()]]),
                                 $.get('#{url}/doc', fn[doc][$('.documentation').empty().append(doc)]),

                                 where*[entry(x) = html[div.entry(code(x), ' ', a('[x]')/click(fn_[$(this).parent().remove()]))],
                                        log      = window.log(x)   = $('div.log').append(entry(JSON.stringify(x))),
                                        error    = window.error(x) = $('div.log').append(entry(x.toString()).addClass('error')),
                                        url      = document.location.href]])]}).

HTML server configuration.
You can send HTML pages to the client by writing initialization functions. To send a hello world page, for example:

| montenegro.server(8080).html('/hello', qs[$('body').append(html[h1('Hello world!')])]);

The client file contains full documentation for the html[] macro (the client ends up macroexpanding the code above).

  tconfiguration('std', 'montenegro.server.html', function () {
    l[html = this.configure('montenegro.html').montenegro.html] in
    this.configure('montenegro.server').montenegro.server.extensions /se[
      _.html(url, t) = l[s = html(t)] in this /se[_.on(url, 'GET', fn[req, res][res /se[_.writeHead(200, {'content-type': 'text/html'}), _.end(s)]])]]}).

Proxy configuration.
Forwards headers both ways, changing only the 'host' header for sending. You can specify functions to intercept the request/response data to transform it in some way.

  tconfiguration('std seq continuation', 'montenegro.server.proxy', function () {
    l[http = this.configure('montenegro.core').montenegro.require('http')] in
    this.configure('montenegro.server').montenegro.server.extensions /se[
      _.proxy(url, options) = l/cps[(req, res) <- this.on(new RegExp('^#{url}'), null, _)]
                                   [l[req0 = proxy_request_for(req, url)]
                                     [req.pipe(req0),
                                      l/cps[res0 <- req0.on('response', _)]
                                           [res.writeHead(res0.statusCode, res0.headers), res0.pipe(res)]]],

      where*[parts_for(url) = /^\/?([^:\/]+)(:?\d*)(\/?.*)$/.exec(url), host_for(parts) = parts && parts[1], port_for(parts) = parts && Number(parts[2].substring(1)) || 80,
             proxy_request_for(req, base_url) = l*[parts = parts_for(req.url.replace(base_url, '')), host = host_for(parts), port = port_for(parts)] in
                                                http.createClient(port, host).request(req.method, parts && parts[3] || '/', caterwaul.util.merge({}, req.headers, {host: host}))]]}).

File server configuration.
Sometimes you want to serve files from a directory. This is a fairly simple service to do that. I imagine there are security problems with it.

  tconfiguration('std continuation', 'montenegro.server.file', function () {
    l[sanitize(s) = s.replace(/\.\+/g, '.'), fs = this.configure('montenegro.core').montenegro.require('fs')] in
    this.configure('montenegro.server').montenegro.server.extensions /se.e[
      e.file_extension_mimetypes = {css: 'text/css', html: 'text/html', js: 'application/javascript', '': 'text/plain'},

      e.file(url, filename) = this /se[l/cps[(req, res) <- this.on(new RegExp('^#{url.replace(/\/$/, "")}(/|$)'), 'GET', _)]
                                            [req.url = req.url.replace(/\?.*$/, ''),

                                             res.writeHead(200, {'content-type': content_type_for(req.url)}), read_stream.pipe(res),
                                             where[read_stream           = fs.createReadStream('#{filename}#{sanitize(req.url.substring(url.length))}'),
                                                   content_type_for(url) = /\.(\w+)$/.exec(url) /re[_ && _[1] /re[e.file_extension_mimetypes[_] || e.file_extension_mimetypes['']]]]]]]}).

Alias configuration.
Gives you the ability to alias content with or without redirects. For example:

| some_server.alias('/', '/index.html');                        // A server-side redirect (no 30x return code)
  some_server.alias('/foo', '/bar', 'POST');                    // Alias POST requests instead of everything
  some_server.alias(/^\/foo/(.*)$/, '/bar/$1');                 // Alias all URLs starting with /foo/ to /bar/whatever
  some_server.redirect('/', '/index.html');                     // A client-side redirect (301 error code)
  some_server.redirect('/', '/index.html', {code: 302});        // A client-side redirect with a custom code
  some_server.redirect('/foo', '/bar', {method: 'POST'});       // Issue redirect for POSTs instaed of GETs

Specifying a method of null indicates that all methods should be aliased.

  tconfiguration('std continuation', 'montenegro.server.alias', function () {
    this.configure('montenegro.server').montenegro.server.extensions /se[
      _.alias(from, to, method)     = this /se[_.on(from, method, fn[req, res][_(req /se[_.url = from.test ? _.url.replace(from, to) : to], res)])],
      _.redirect(from, to, options) = this /se[l/cps[(req, res) <- this.on(from, options /re[_ && _.method], _)] in
                                               res /se[_.writeHead(options /re[_ && _.code] || 301, {location: to}), res.end()]]]}).

Final configuration.
This configuration bundles all of the configurations together.

  configuration('montenegro', function () {this.configure('montenegro.html montenegro.route.url montenegro.server montenegro.server.rpc montenegro.server.html montenegro.server.file',
                                                          'montenegro.server.alias montenegro.server.proxy')});
__f8970a1ab871b1cd511f77494c1d916d
meta::sdoc('js::test/chat-server', <<'__3d69a36b765b14d32157c88c485ec402');
A trivial chat server.

caterwaul.clone('std seq montenegro')(function () {
  caterwaul.montenegro.server(8080) /se[
    // Server code:
    _.rpc('/chat/listen', fn_[clients.push(this)]).rpc('/chat/send', fn[message][seq[clients *![_(message)]], clients = seq[~[]], this('OK')]), where[clients = seq[~[]]],

    // Client code:
    _.html('/', qs[caterwaul.montenegro.rpc('/chat/listen')(fn[message][$('.log').append(html[div.message(message)]), this()]),
                   let*[send = caterwaul.montenegro.rpc('/chat/send')] in
                   $('body').append(html[div.log(input /enter_key(fn_[send($(this).val()), $(this).val('')]))])])]})();
__3d69a36b765b14d32157c88c485ec402
meta::sdoc('js::test/paint-app', <<'__4141b34bbe6c3cda548684c343b346bd');
Collaborative paint test application

caterwaul.clone('std seq montenegro')(function () {
  let[connections = seq[~[]]] in
  caterwaul.montenegro.server(8080) /se[
    _.rpc('/listen', fn_[connections.push(this)]).rpc('/send', fn[message][seq[connections *![_(message)]], connections = seq[~[]], this('OK')]),

    _.html('/', qs[caterwaul.montenegro.rpc('/listen')(fn[message][this() /se[$('canvas')[0].getContext('2d') /se[_.moveTo(message.x1, message.y1), _.strokeStyle = message.color || '#35a',
                                                                                                                  _.lineTo(message.x2, message.y2), _.stroke()]]]),
                   let[send = caterwaul.montenegro.rpc('/send')] in
                   $('body').append(let[x = 0, y = 0, adjust(e) = let[o = $('canvas').offset()] in e /se[_.real_x = _.pageX - o.left, _.real_y = _.pageY - o.top]] in 
                     html[canvas /css({border: 'solid 1px #888'})
                                 /mousedown(fn[e][adjust(e), x = e.real_x, y = e.real_y])
                                 /mousemove(fn[e][adjust(e), send({x1: x, y1: y, x2: x = e.real_x, y2: y = e.real_y}), when[x || y]])
                                 /mouseup  (fn[e][x = y = 0])])])]})();
__4141b34bbe6c3cda548684c343b346bd
meta::sdoc('js::test/proxy', <<'__9fea7e2a4aade18ef457d8b47be2e6f7');
Proxy test app

caterwaul.clone('std seq continuation montenegro')(function () {
  caterwaul.montenegro.server(8080) /se[
    _.proxy('/proxy/'),
    _.html('/', qs[$('body').append(html[input /val('www.google.com'), button('GET') /click(fn_[$.get('/proxy/#{$("input").val()}', fn[data][$('body').append(html[pre(data)])])])])])]})();
__9fea7e2a4aade18ef457d8b47be2e6f7
internal::main();

__END__