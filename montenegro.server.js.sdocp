sdocp('montenegro.server.js.sdoc', 'Montenegro server library | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nMontenegro extends Caterwaul (http://spencertipping.com/caterwaul) to operate in a node.js environment and provide an RPC endpoint.\n\n  caterwaul.\n\nNode.js variables and Montenegro reference.\nCaterwaul has a problem with node.js variables. Specifically, code that it compiles can\'t reach the \'require\' variable, which ends up being really important. To fix this, Montenegro binds that\nvariable within any compiled function by using a macro.\n\n   configuration(\'montenegro.core\',           function () {this.field(\'montenegro\', {require: require})}).\n  tconfiguration(\'std\', \'montenegro.require\', function () {this.configure(\'montenegro.core\').macro(qs[require],    new this.ref(this.montenegro.require) /re[fn_[_]])}).\n  tconfiguration(\'std\', \'montenegro.ref\',     function () {this.configure(\'montenegro.core\').macro(qs[montenegro], new this.ref(this.montenegro)         /re[fn_[_]])}).\n\nRPC endpoints.\nYou can create an RPC service on a URL. The RPC endpoint wraps the function in a CPS-converted HTTP request/response proxy that listens for POST requests on a given URL, expects a JSON array\nin the body, and converts the body into a list of parameters for the function you specify. Your function can access the reply continuation by either returning normally or invoking \'this\' on\nthe reply object.\n\nAll listeners are CPS-converted, so you can have coroutine-based communication between the client and server. For example, this is a broadcast chat server (which relies on singly re-entrant\ncontinuations for replies):\n\n| var clients = seq[~[]];\n  montenegro.rpc(\'/chat\', fn_[clients.push(this)]);\n  montenegro.rpc(\'/chat/send\', fn[message][seq[clients *![_(message)], clients = ~[]], this(\'OK\')]);\n\nThe client code would look like this:\n\n| var send = montenegro.rpc(\'/chat/send\');\n  var chat = montenegro.rpc(\'/chat\');\n  let*[listen() = let/cps[message <- chat(_)][console.log(message), listen()]] in listen();\n  let/cps[_ <- $(\'#send\').click(_)][send($(\'#textbox\').val())];\n\nFinal configuration.\nThis configuration bundles all of the configurations together.\n\n  configuration(\'montenegro\', function () {this.configure(\'montenegro.require montenegro.ref montenegro.http\')});\n');