sdocp('montenegro.js.sdoc', 'Montenegro server library | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nMontenegro extends Caterwaul (http://spencertipping.com/caterwaul) to operate in a node.js environment and provide REST web services. It provides asynchronous connectors, stream transformers,\nURL routing, and some other utilities that make non-blocking servers easier to develop.\n\nmontenegro = caterwaul.clone(\'std\', function () {\n\nAsynchronous connectors.\nConnecting asynchronous services is generally a pain. You have to forward the \'data\' and \'end\' continuations (if they\'re named as they are in node.js) and manage bindings (meaning that you\nprobably can\'t eta-reduce). Montenegro provides macros for this:\n\n| request >on(\'data\')|write> response           // -> request.on(\'data\', fn_[response.write(data)])\n  request >on(\'end\')|end>    response           // -> request.on(\'end\',  fn_[response.end()])\n\nYou can also specify chains like this:\n\n| montenegro.chain(\'http\', fn[c1, c2][c1 >on(\'data\')|write> c2, c1 >on(\'end\')|end> c2]);\n  request <cps(http)> response;\n\n\n\n});\n');