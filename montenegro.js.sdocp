sdocp('montenegro.js.sdoc', 'Montenegro server library | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nMontenegro extends Caterwaul (http://spencertipping.com/caterwaul) to operate in a node.js environment and provide REST web services. It provides asynchronous connectors, stream transformers,\nURL routing, and some other utilities that make non-blocking servers easier to develop.\n\n  montenegro =\n\nNode.js variables.\nCaterwaul has a problem with node.js variables. Specifically, code that it compiles can\'t reach the \'require\' variable, which ends up being really important. To fix this, Montenegro binds that\nvariable within any compiled function by using a macro.\n\n  caterwaul.configuration(\'montenegro.require_reference\', function () {this.attribute(\'node_require\', require)}).\n           tconfiguration(\'std\', \'montenegro.require\',    function () {this.macro(qs[require], fn_[new this.ref(caterwaul.node_require)])}).\n\nAsynchronous connectors.\nNode programs often stream things, but sometimes convert those streams to whole pieces of data. This macro/function layer provides relatively simple ways of doing that. The idea is that there\nare a bunch of small combinators to transform streams in various ways. By composing them you can construct stream operators that let you do most things in point-free style.\n\nFinal configuration.\nThis configuration bundles together all of the modules to form the \'montenegro\' function.\n\n  configuration(\'montenegro\', function () {this.configure(\'montenegro.require_reference montenegro.require\')}).clone(\'montenegro\');\n');